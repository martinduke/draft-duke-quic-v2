{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2022-12-15T00:42:42.983713+00:00",
  "repo": "quicwg/quic-v2",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWU4NjUyODQ1Nzc=",
      "title": "Add a provisional version",
      "url": "https://github.com/quicwg/quic-v2/issues/1",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Because VN is still a moving target, and the WG might want to increase the diff from v1, the draft should specify an experimental version number to use until RFC, at which point we can switch over to 0x00000002.",
      "createdAt": "2021-04-22T18:19:48Z",
      "updatedAt": "2021-04-23T21:05:21Z",
      "closedAt": "2021-04-23T21:05:21Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Yes. Something like \"0xFF0100nn\"...",
          "createdAt": "2021-04-23T19:41:14Z",
          "updatedAt": "2021-04-23T19:41:14Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWU4NjYzODU0MzU=",
      "title": "Retry protection key",
      "url": "https://github.com/quicwg/quic-v2/issues/2",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft defines a V2 salt. Should it also define a V2 retry protection key?",
      "createdAt": "2021-04-23T19:45:48Z",
      "updatedAt": "2021-04-26T19:28:16Z",
      "closedAt": "2021-04-26T19:28:16Z",
      "comments": []
    },
    {
      "number": 3,
      "id": "MDU6SXNzdWU4NjgwNzI2NDA=",
      "title": "Update Labels",
      "url": "https://github.com/quicwg/quic-v2/issues/3",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We can get complete key separation between quic v1 and v2 by simply changing the labels used as HKDF inputs.",
      "createdAt": "2021-04-26T19:31:43Z",
      "updatedAt": "2021-04-26T19:56:58Z",
      "closedAt": "2021-04-26T19:56:58Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "9.6 of quic-tls says we should, so this is inflight.",
          "createdAt": "2021-04-26T19:46:25Z",
          "updatedAt": "2021-04-26T19:46:25Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWU4NjkzMzQxMDI=",
      "title": "Different version number",
      "url": "https://github.com/quicwg/quic-v2/issues/4",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@martinthomson wants to use some other version number, not 2. I'd have to retitle the draft, but other than that I don't have a strong feeling about it.",
      "createdAt": "2021-04-27T23:06:09Z",
      "updatedAt": "2021-04-28T16:04:49Z",
      "closedAt": "2021-04-28T16:04:49Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Upon further reflection, this is a pretty fundamental question: are QUIC versions incremental, where in general version N comes after N-1 and is implied to be \"better\", or are they randomly spread over the space with no clear temporal or quality relationship?",
          "createdAt": "2021-04-28T04:35:31Z",
          "updatedAt": "2021-04-28T04:35:31Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> are QUIC versions incremental, where in general version N comes after N-1 and is implied to be \"better\", or are they randomly spread over the space with no clear temporal or quality relationship?\r\n\r\nI think this is the framing that we should use for reaching a resolution.\r\n\r\nThe reason we chose \"HTTP/3\" as the name for the HTTP binding for QUIC is because people tend to believe that increments on version number represent something better. It'd be hard if not impossible to change that perception.\r\n\r\nComparing to that, this \"v2\" draft is not something meant to be better than v1 - it is merely an alternative wire encoding of v1.\r\n\r\nBased on that, I tend to agree with @martinthomson; it would be less confusing to people if we choose a large random number than \"v2.\"",
          "createdAt": "2021-04-28T04:46:09Z",
          "updatedAt": "2021-04-28T04:46:09Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWU4Njk0ODEwNTI=",
      "title": "ALPN",
      "url": "https://github.com/quicwg/quic-v2/issues/5",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "on slack some are saying we should roll a new h3 ALPN for running over quicv2. I cannot quite follow the argument but this is a better venue for the discussion.",
      "createdAt": "2021-04-28T04:26:07Z",
      "updatedAt": "2021-06-02T18:22:48Z",
      "closedAt": "2021-06-02T18:22:48Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "You definitely need a new specification, because a different QUIC version might not be suitable.  You either say:\r\n\r\n* h3 can be used with QUICv2, or\r\n* h3q2 (or whatever new string you like) identifies HTTP/3 when running over QUICv2.\r\n\r\nThere are lots of arguments as to why you might choose to do one or the other.",
          "createdAt": "2021-04-28T04:33:18Z",
          "updatedAt": "2021-04-28T04:33:18Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I'm swayed more toward a new ALP.N at the moment ",
          "createdAt": "2021-04-28T11:34:38Z",
          "updatedAt": "2021-04-28T11:34:38Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "FWIW we painted ourselves into this corner. We punting on the problem and simply tied H3 to v1. Now we are actively trying to solve VN we might be able to pay back the tech debt. For example, a document that updates H3 to say that it can work over versions compatible with v1. Incompatible versions could still need to defined as a new application mapping,",
          "createdAt": "2021-04-28T12:44:35Z",
          "updatedAt": "2021-04-28T12:44:35Z"
        },
        {
          "author": "RyanTheOptimist",
          "authorAssociation": "NONE",
          "body": "Whatever we do, I think we need to ensure that servers can give sufficient information to clients via Alt-Svc so that the client can pick a compatible version (if any) and avoid VN. This could, then, be solved via Alt-Svc layer or via ALPN, but I think this is any important property.",
          "createdAt": "2021-04-28T18:39:05Z",
          "updatedAt": "2021-04-28T18:39:05Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Well \"avoiding VN\" is only important to the extent that we can't do compatible VN.",
          "createdAt": "2021-04-28T18:50:54Z",
          "updatedAt": "2021-04-28T18:50:54Z"
        },
        {
          "author": "RyanTheOptimist",
          "authorAssociation": "NONE",
          "body": "I think we want to allow the existence of a server that only supports v2 and servers that only support v1.... and clients that only support v2 and clients that only support v1. Given this, there will be client : server pairs which do not support any mutually compatible options. It seems like it would be desirable for clients to be able to deduce this from Alt-Svc without needing to see the QUIC connection to the server fail?",
          "createdAt": "2021-04-28T19:54:30Z",
          "updatedAt": "2021-04-28T19:54:30Z"
        },
        {
          "author": "RyanTheOptimist",
          "authorAssociation": "NONE",
          "body": "Oh, and this text from the HTTP/3 docs is probably relevant:\r\n\r\n>    HTTP/3 relies on QUIC version 1 as the underlying transport.  The use\r\n>    of other QUIC transport versions with HTTP/3 MAY be defined by future\r\n>    specifications.\r\n",
          "createdAt": "2021-04-28T21:17:16Z",
          "updatedAt": "2021-04-28T21:17:16Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWU4NzExODMzOTg=",
      "title": "Grease the packet type?",
      "url": "https://github.com/quicwg/quic-v2/issues/7",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It would be a simple matter to switch around the packet type codes in long headers, e.g.\r\n\r\n0x0 = Retry\r\n0x1 = Handshake\r\n0x2 = 0-RTT\r\n0x3 = Initial\r\n\r\nso no one ossifies on 0x0 = Initial.",
      "createdAt": "2021-04-29T15:58:09Z",
      "updatedAt": "2022-01-12T16:26:32Z",
      "closedAt": "2022-01-12T16:26:32Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "I'm ambivalent on this.  It's fairly trivial to have the long header parsed in version-specific fashion, so it's easy to implement, but I'm not sure how much value it has.  It also makes reading packets slightly harder.",
          "createdAt": "2022-01-05T04:22:48Z",
          "updatedAt": "2022-01-05T04:22:48Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOFX7TQc4-mBKB",
      "title": "Don't Change Labels",
      "url": "https://github.com/quicwg/quic-v2/issues/9",
      "state": "CLOSED",
      "author": "nibanks",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "> The labels used in {{RFC9001}} to derive packet protection keys (Sec 5.1), header protection keys (Sec 5.4), Retry Integrity Tag keys (Sec 5.8), and key updates (Sec 6.1) change from \"quic key\" to \"quicv2 key\", from \"quic iv\" to \"quicv2 iv\", from \"quic hp\" to \"quicv2 hp\", and from \"quic ku\" to \"quicv2 ku,\" to meet the guidance for new versions in Section 9.6 of that document.\r\n\r\nDo we really need to change the labels? This will be a much bigger pain for me to integrate beyond the normal salt and retry secret changes that we regularly did for draft versions. What added benefit are the label changes giving?",
      "createdAt": "2021-11-10T18:15:31Z",
      "updatedAt": "2022-01-11T17:14:13Z",
      "closedAt": "2022-01-11T17:14:13Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "https://www.rfc-editor.org/rfc/rfc9001.html#key-diversity\r\n\r\nit's a SHOULD",
          "createdAt": "2021-11-10T18:22:14Z",
          "updatedAt": "2021-11-10T18:22:14Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "Ok. It's probably worth some more discussion. Personally, I'd rather follow the model we set with draft versions. At least, that's what MsQuic is setup to easily handle.",
          "createdAt": "2021-11-10T18:24:39Z",
          "updatedAt": "2021-11-10T18:24:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "This SHOULD is important; it will help keep your KDF from atrophy.  It was a little annoying to implement for me, but not overly so.\r\n\r\n(Note that we have transcript diversity by virtue of including the version negotiation transport parameters, but I don't think that is sufficient.)\r\n\r\n@nibanks, is this still a problem?",
          "createdAt": "2022-01-11T00:47:32Z",
          "updatedAt": "2022-01-11T00:47:32Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "It's an annoyance more than a problem. Our per-version abstraction will have to be modified to account for this, if we go forward with it, adding additional complexity.",
          "createdAt": "2022-01-11T00:52:25Z",
          "updatedAt": "2022-01-11T00:52:25Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Yeah, I can sympathize.  It was annoying to implement across an abstraction boundary for us also.  Luckily, we don't have to manage independent release cycles or anything truly awkward there.",
          "createdAt": "2022-01-11T01:02:12Z",
          "updatedAt": "2022-01-11T01:02:12Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think anyone is strenuously objecting to the current design; closing",
          "createdAt": "2022-01-11T17:14:13Z",
          "updatedAt": "2022-01-11T17:14:13Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOFX7TQc4-ukxt",
      "title": "Applicability of extensions",
      "url": "https://github.com/quicwg/quic-v2/issues/10",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft should state explicitly that all v1 extensions can be applied to v2 connections.",
      "createdAt": "2021-11-12T20:46:59Z",
      "updatedAt": "2021-11-22T23:06:26Z",
      "closedAt": "2021-11-22T23:06:26Z",
      "comments": []
    },
    {
      "number": 14,
      "id": "I_kwDOFX7TQc4_jV8O",
      "title": "Clarify about cross version 0-RTT via Compatible Version Negotiation",
      "url": "https://github.com/quicwg/quic-v2/issues/14",
      "state": "CLOSED",
      "author": "flano-yuki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Thank you for this work.\r\n\r\nCan quic v2 server accept a v1 0-RTT packet via Compatible Version Negotiation?\r\n\r\nIf I understand correctly, The [version negotiation specification](https://quicwg.org/version-negotiation/draft-ietf-quic-version-negotiation.html#name-interaction-with-0-rtt) says that \"future versions will determine how to handle it.\" Even if the server accepts v1 packets as is, I would think the handling needs to be described in v2.",
      "createdAt": "2021-11-29T16:17:06Z",
      "updatedAt": "2022-01-07T20:29:43Z",
      "closedAt": "2022-01-07T20:29:43Z",
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "Developers are actually puzzled.\r\nSee https://github.com/quicwg/version-negotiation/issues/68",
          "createdAt": "2021-12-02T00:59:05Z",
          "updatedAt": "2021-12-02T00:59:05Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Moving the discussion here, I think that 0-RTT is not as clear-cut as it seems.\r\n\r\nWhen doing a compatible upgrade from v1 to v2, a server makes the switch when it processes the ClientHello (that is, all Initial packets from the client to a first approximation).  It is relatively easy for the server to make the switch cleanly at that point because it doesn't need to read any more Initial packets and all other packets will be v2 from then on.\r\n\r\nA client makes the switch based on seeing a v2 packet.  It might receive some v1 Initial packets, but the one containing a ServerHello will be v2.  If the client is sending 0-RTT packets, it might need to send them until it receives all of the Handshake packets from the server.  That is, it might be some time.\r\n\r\nFor a client in that state, it doesn't really make sense to switch to sending v2 0-RTT packets, but if it doesn't it will be intermixing transmission of v1 0-RTT packets and v2 Handshake packets.  This is awkward because there is no clean cut-over.\r\n\r\nIn my implementation, I also have to deal with stack integration issues that make installing the right 0-RTT keys difficult.\r\n\r\nI ultimately opted to just reject 0-RTT if there was a version change.  The number of cases in which you might want to use 0-RTT and you don't already know what version the server wants to use are very limited.  Basically, this only happens if you are doing 0-RTT across an upgrade of the server.  Losing 0-RTT in that case seems tolerable.",
          "createdAt": "2022-01-05T06:08:11Z",
          "updatedAt": "2022-01-05T06:08:11Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOFX7TQc4_2rCC",
      "title": "Need to specify the update process",
      "url": "https://github.com/quicwg/quic-v2/issues/15",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "We now have some implementation experience, and got interop between 2 implementations. That's great, but the process was difficult because the transition is somehow under specified. There was a lot of discussion as issues with the compatible version negotiation draft:\r\n\r\n* [Specify impact on 0-RTT, session resume tickets, etc.](https://github.com/quicwg/version-negotiation/issues/68)\r\n* [Security issue when upgrading based on received version in header](https://github.com/quicwg/version-negotiation/issues/70)\r\n* [Validation on incompatible negotiation](https://github.com/quicwg/version-negotiation/issues/73)\r\n\r\nThese issues cannot be fully addressed in the compatible version negotiation draft, which has to be version independent. Instead, they need to be addressed in specific drafts. The V2 draft, for example, should specify exactly what happens during the version negotiation. My understanding is that when version negotiation succeeds, we will see something like:\r\n\r\n- Client sends a first flight composed of Version 1 initial packets\r\n- Server may send Version 1 initial packets containing acknowledgement, e.g., to manage losses of Initial packets\r\n- At some point, the server will have received and parsed the transport parameters, and decided to upgrade to V2\r\n- After that point, server will send version 2 packets (Initial, Handshake, 1RTT)\r\n- Client will receive version 2 packets and should be ready to process them before the negotiation completes\r\n- The transport parameters will arrive in V2 handshake packets, after which the negotiation is done.\r\n\r\nThere are quite a few potential issues that need resolution:\r\n\r\n1) As explained above, in case of successful negotiation, the client expects the server to start sending V2 packets asap. Shall it ignore V1 packets as soon as it received V2 packets? Should in check version numbers in Initial packets, in a process similar to key updates?\r\n2) If the client receives transport parameters on a version 2 packet, what shall it do if the chosen version is V1?\r\n3) And vice versa?\r\n4) If the server receives V2 handshake packets from the client, shall it conclude that the negotiation is successful?\r\n5) In case of session resumption, does the client resume using V1 or V2? I think the answer to that question depends on the content of the \"supported versions\" list provided by the server. If it includes V2, then the server is ready to receive V2 packets. If the server is part of a server farm with partial deployment of V2, it should not say that V2 is ready. The answer may also depend on local conditions at the client.\r\n6) If the client resumes using V1, it will send 0-RTT packets using V1. The server will receive these packets after the client's initial packets, and thus after receiving the transport parameters and completing the version upgrade. Should the server drop these packets? Or should it continue accept them until the handshake completes?\r\n7) On the client side, there will be a delay between completing the negotiation and finalizing the handshake. The client may want to send 0-RTT packets during that interval. Shall it send those using V1 or V2?\r\n\r\n\r\n",
      "createdAt": "2021-12-04T21:14:50Z",
      "updatedAt": "2022-01-07T20:29:43Z",
      "closedAt": "2022-01-07T20:29:43Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "The most literal answer to your question is, \"of course all v1 can be interchanged with v2, since they're identical\". But I'm going to answer the more interesting question of what precise questions a new version has to answer.\r\n\r\nAFAICT, in the v1->v2 case, (assuming all the support is present) there are four possible responses from the server:\r\n1) a v2 Initial with ACK and/or ServerHello\r\n2) a v1 Initial with ACK, followed by a v2 Initial with ServerHello\r\n3) a v1 Retry (a v2 Retry would also be correct, but silly for the server to do things that way)\r\n4) a v1 Initial with ACK, followed by nothing (because some of the client hello was lost)\r\nI believe this generalizes to all transitions v1->v_n.\r\n\r\nSo clearly the client can't draw any conclusions about the ultimate version until it sees the server hello, or a v2 packet of any kind. It can't fully authenticate the handshake until we get 1-RTT keys.\r\n\r\nSo to answer your questions:\r\n(1) yes, ignore v1 once you get v2 -- you don't need the Initial ACK anyway\r\n(2) and (3) if the chosen version in the TP doesn't match the QUIC header, this is a VN violation, no? Shouldn't this be handled in the VN draft?\r\n(4) I would think that any client packet with v2 and the correct keys would do the trick.\r\n(5) The two elements of this are the NEW_TOKEN token and the TLS session ticket. The hard part here is that the contents of this are not in any version spec; if QUIC and TLS implementations put version specific things in there, then it won't work. IIUC in general the session ticket wouldn't include anything derived from the version-dependent HKDF labels, so it ought to work.\r\n(6) and (7) I believe the server has to handle v1 0RTT till the handshake is over, as it can't guarantee that 0RTT arriving after the 2nd flight was sent after that flight. The client could switch its 0RTT to v2 once negotiated -- I have no strong opinion if that complexity is worthwhile.\r\n\r\nI don't think putting these responses in a PR is the right move -- I'd like to clarify what properly should go in the VN draft and what should rest here.",
          "createdAt": "2021-12-07T20:23:46Z",
          "updatedAt": "2021-12-07T20:23:46Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "> (1) yes, ignore v1 once you get v2 -- you don't need the Initial ACK anyway\r\n\r\nMinor fix. In @huitema's example, ACK in V1 from the server is received by the client before any V2 packets. So, the client can handle it anyway.",
          "createdAt": "2021-12-08T01:47:33Z",
          "updatedAt": "2021-12-08T01:47:33Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "> (6) and (7) I believe the server has to handle v1 0RTT till the handshake is over, as it can't guarantee that 0RTT arriving after the 2nd flight was sent after that flight. The client could switch its 0RTT to v2 once negotiated -- I have no strong opinion if that complexity is worthwhile.\r\n\r\nThis is probably a good idea. We can say that 0RTT belongs to the previous connection of V1.\r\n\r\n@huitema If you agree, let's implement this and do interop.",
          "createdAt": "2021-12-08T01:51:00Z",
          "updatedAt": "2021-12-08T01:51:00Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "> a v1 Retry (a v2 Retry would also be correct, but silly for the server to do things that way)\r\n\r\nWe need to prohibit v2 Retry since a v1-only client cannot retry if v2 Retry is received.",
          "createdAt": "2021-12-08T01:57:44Z",
          "updatedAt": "2021-12-08T01:57:44Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "> If the client receives transport parameters on a version 2 packet, what shall it do if the chosen version is V1?\r\n\r\nWhen a client see V2 in a long header, it switches to V2 keys. This switch is allowed only once. After handshake is completed, the client checks if the version for keys and Chosen Version is the same.",
          "createdAt": "2021-12-08T02:01:13Z",
          "updatedAt": "2021-12-08T02:01:13Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "OK, I will test the 0-RTT part internally first. There are timing issues in the server code, depending on whether the 0-RTT key is produced before the negotiation or after it.",
          "createdAt": "2021-12-08T05:55:37Z",
          "updatedAt": "2021-12-08T05:55:37Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "@huitema The idea for 0-RTT works perfectly on my local tests. I will brush up the code tomorrow and set up a public server.",
          "createdAt": "2021-12-08T06:50:22Z",
          "updatedAt": "2021-12-08T06:50:22Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOFX7TQc5ABJPl",
      "title": "Test vectors",
      "url": "https://github.com/quicwg/quic-v2/issues/17",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "RFC 9001 had 'em and they were very helpful.\r\n\r\nYou might find [this script](https://gist.github.com/martinthomson/1f000d3e389b0bf1308e1043e141fbb9) to be useful.",
      "createdAt": "2021-12-08T05:59:38Z",
      "updatedAt": "2022-01-20T23:03:53Z",
      "closedAt": "2022-01-20T23:03:52Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Note that the TLS messages in that script hasn't been changed to include the version negotiation transport parameters.  If you want to publish it, then you'll need to work out how to do that, sorry.",
          "createdAt": "2021-12-08T06:01:36Z",
          "updatedAt": "2021-12-08T06:01:36Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Finally done",
          "createdAt": "2022-01-20T23:03:52Z",
          "updatedAt": "2022-01-20T23:03:52Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOFX7TQc5BMmLL",
      "title": "Request provisional version number allocation",
      "url": "https://github.com/quicwg/quic-v2/issues/20",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Get one from IANA",
      "createdAt": "2022-01-04T23:00:59Z",
      "updatedAt": "2022-01-12T16:23:31Z",
      "closedAt": "2022-01-12T16:23:31Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll ask for 0x70 9a 50 c4 .",
          "createdAt": "2022-01-04T23:01:44Z",
          "updatedAt": "2022-01-04T23:01:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Feedback from @DavidSchinazi was that you should do that after publishing a revision with that number in it.  I second that.",
          "createdAt": "2022-01-11T00:48:08Z",
          "updatedAt": "2022-01-11T00:48:08Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOFX7TQc5BMmti",
      "title": "Packet injection during Compatible VN",
      "url": "https://github.com/quicwg/quic-v2/issues/21",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There might be security considerations related to injecting packets during compatible VN. They may not be worse than other Initial injection attacks, but think it through.",
      "createdAt": "2022-01-04T23:05:12Z",
      "updatedAt": "2022-01-11T17:13:23Z",
      "closedAt": "2022-01-11T17:13:23Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "The only packets that a client might accept are in versions that are compatible and supported by the client.\r\n\r\nIn practice however, a client will accept packets in any version prior to fixating on a version.  My implementation will accept any compatible version for Initial packets until it receives a CRYPTO frame, at which point it fixates on that version.  That means that what it will accept is limited to ACKs and path validation.  Any attack on these can be mounted on a single QUIC version without compatible version negotiation.\r\n\r\nIf a compatible version is broken and the client is willing to use that version, then it will be vulnerable to attack.  That's the new attack here.",
          "createdAt": "2022-01-11T00:55:04Z",
          "updatedAt": "2022-01-11T00:55:04Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this is correct.",
          "createdAt": "2022-01-11T17:13:23Z",
          "updatedAt": "2022-01-11T17:13:23Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOFX7TQc5BM45Y",
      "title": "Retry and compatible upgrade",
      "url": "https://github.com/quicwg/quic-v2/issues/23",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "It is necessary to specify how retry works when a compatible upgrade is used.\r\n\r\nThe easiest way to specify this is to say that Retry can be sent in version 1, but the validation is performed as though a version 2 retry was sent.  That's what I've seen implemented thus far.",
      "createdAt": "2022-01-05T01:40:11Z",
      "updatedAt": "2022-01-12T22:58:19Z",
      "closedAt": "2022-01-12T22:58:19Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Here's the relevant text in your PR (numbers mine) \r\n(1) A server SHOULD produce a Retry packet in the same version as the Initial packet\r\nthat the Retry packet responds to.  (2) Validation of the Retry exchange uses the\r\nlogic of the final negotiated version, treating the Retry as if it were sent in\r\nthat version. (3) This means that the version used for Retry is not authenticated,\r\nonly that it occurred and the connection ID that was used.\r\n\r\n(1) I made it a MUST in the recent merge, to make it a bit easier for clients.\r\n\r\n(2) I'm not really sure what this means in the context of v1/v2 -- the logic is identical in both cases. Maybe this is something for the v1->vn text (pending) in the VN doc? But yeah, anything in the client hello, including the retry TPs, are processed syntactically as v1  but the content is used for v2 purposes. Do I understand the takeaway correctly?\r\n\r\n(3) This is a fair point to make, I guess: the Retry logic only ever measured that the CIDs matched. But, meh? The client changing the version between connection attempts would be strange, but legal and not obviously dangerous. If you think this sentence is valuable, I can add it.\r\n\r\n\r\n\r\n",
          "createdAt": "2022-01-07T21:12:12Z",
          "updatedAt": "2022-01-07T21:12:12Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "1. Fine.\r\n2. Yeah, this was just a wording choice of mine.  I do think that the validation is an important point to be clear on, lest people decide to skip it.  I don't think that this can be part of the VN document at least as it stands as the Retry mechanism is version-specific and so any handling of it also needs to be.\r\n3. This is really just noting the limitations of the validation.  I don't think that it has security consequences, particularly if the client enforces the requirement that Retry use the original version (which, presumably they are permitted to... by dropping the packet).",
          "createdAt": "2022-01-11T01:01:22Z",
          "updatedAt": "2022-01-11T01:01:22Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/quicwg/version-negotiation/issues/78 is going to introduce some considerations specific to v1. Nevertheless, I'm happy to write something down here.",
          "createdAt": "2022-01-11T15:31:43Z",
          "updatedAt": "2022-01-11T15:31:43Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOFX7TQc5BhrZq",
      "title": "MUST fully support VN is too strong",
      "url": "https://github.com/quicwg/quic-v2/issues/25",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft currently states:\r\n> QUIC version 2 endpoints SHOULD also support QUIC version 1. Any QUIC endpoint that supports multiple versions MUST fully implement [QUIC-VN] to prevent version downgrade attacks.\r\n\r\nI think we should weaken this to only require the downgrade prevention aspect of QUIC-VN. Chrome doesn't currently support incompatible version negotiation and we don't plan to change that when we add support for v2.",
      "createdAt": "2022-01-11T16:02:37Z",
      "updatedAt": "2022-01-12T20:11:37Z",
      "closedAt": "2022-01-12T20:11:37Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that 'fully support' is too onerous. However, it is not really clear to me what the minimum set of VN support is. The VN draft doesn't really envision partial support.\r\n\r\nIf a client includes the version information TP, it MUST support compatible negotiation. A server that sends VN packets (as they all should!) MUST support incompatible negotiation.\r\n\r\nSo for clients, AFAICT there are three levels of support:\r\n1) No support: do not the send the TP. If you get a VN packet, switch to TCP\r\n2) Compatible only - send the TP, be prepared to accept an upgrade\r\n3) Full: respond to VN packets with incompatible negotiation.\r\n\r\nFor servers, it would be\r\n1) Send the TP and support incompatible negotiation\r\n2) Support compatible negotiation",
          "createdAt": "2022-01-11T17:12:14Z",
          "updatedAt": "2022-01-11T17:12:14Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "body": "> If a client includes the version information TP, it MUST support compatible negotiation.\r\n\r\nI don't think that's right. The client can just always send `Other Versions = (Chosen Version)`\r\n\r\nTherefore, for clients, the options are:\r\n1. No support: do not the send nor parse the TP. If you get a VN packet, fail the QUIC connection\r\n1. Downgrade prevention only: send the TP with only one other version, also parse and validate the TP. If you get a VN packet, fail the QUIC connection\r\n1. Compatible only: downgrade prevention and be prepared to accept an upgrade\r\n1. Incompatible only: downgrade prevention and retry with new version when receiving VN\r\n1. Full: downgrade prevention, compatible VN and incompatible VN\r\n\r\nI agree with what you said about servers.",
          "createdAt": "2022-01-11T17:56:59Z",
          "updatedAt": "2022-01-11T17:56:59Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't understand 2. If only one version is advertised, what downgrade are we preventing?\r\n\r\nAlso, I don't see how (4) works if the server decides to do a compatible VN. Is the idea that the client only advertises support for one version in its TP?",
          "createdAt": "2022-01-11T18:09:34Z",
          "updatedAt": "2022-01-11T18:14:26Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "body": "> I don't understand 2. If only one version is advertised, what downgrade are we preventing?\r\n\r\nLet's say the client tries version B and the server supports both versions A and B. An active network attacker can intercept the client's version B packets and rewrite them as version A before forwarding them to the server - then you would end up with a connection where the client thinks it's speaking version B and the server thinks it's speaking version A. If version A is vulnerable to an attack that B isn't, the attacker managed to downgrade the security from version B to version A. In practice this attack doesn't work with v1 and v2 because we changed the HKDF labels, but the attack could work on other versions.\r\n\r\nThis entire class of problem goes away if you add the Chosen Version to the TLS transcript, so there's some value in the downgrade-prevention-only mode.\r\n\r\n> Also, I don't see how (4) works if the server decides to do a compatible VN. Is the idea that the client only advertises support for one version in its TP?\r\n\r\nThat's right.",
          "createdAt": "2022-01-11T18:21:02Z",
          "updatedAt": "2022-01-11T18:21:02Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "(2) Offline, David clarified that the attack doesn't work in v1/v2 because the handshake packets authenticate the version field. but this is not generalizable to all QUIC versions.\r\n\r\nas for (4), thanks, makes sense.\r\n",
          "createdAt": "2022-01-11T18:34:13Z",
          "updatedAt": "2022-01-11T18:34:13Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I filed https://github.com/quicwg/version-negotiation/issues/80.\r\n\r\nI think the right language for this draft is something to the effect of \"Endpoints that support multiple versions MUST meet the minimum requirements described in {{QUIC-VN}}.\"",
          "createdAt": "2022-01-11T18:36:49Z",
          "updatedAt": "2022-01-11T18:36:49Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOFX7TQc5BnPOq",
      "title": "HTTP/3 over QUICv2",
      "url": "https://github.com/quicwg/quic-v2/issues/30",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "At IETF 106, [we decided](https://github.com/quicwg/base-drafts/pull/3323) that HTTP/3 only runs over QUICv1. draft-ietf-quic-http still states `HTTP/3 relies on QUIC version 1 as the underlying transport`. Since that document is the reference in the ALPN registry for the ALPN string \"h3\", that means that `Alt-Svc: h3` is formally defined as \"HTTP/3 over QUICv1\". And that's exactly what all major browsers have implemented: if they see \"h3\" in Alt-Svc, they will send a QUICv1 initial.\r\n\r\nSeparately, the QUICv2 draft currently does not mention \"h3\" or HTTP/3 at all. If we were to publish QUICv2 as-is, that would mean that the only way that QUICv2 would ever be used with HTTP/3 would be for clients to send a QUICv1 initial and then have the server perform [compatible version negotiation](https://datatracker.ietf.org/doc/html/draft-ietf-quic-version-negotiation-05#section-4.3) from v1 to v2. That also means that QUICv2 endpoints will forever need to support QUICv1. That doesn't sound ideal.\r\n\r\nThis has been discussed before [on the list](https://mailarchive.ietf.org/arch/msg/quic/VuAWMvB8XFjpfK7kg6QaHn4KHqA/) and [at IETF 111](https://www.youtube.com/watch?v=R7q8cWIAIDQ&t=6262s) but we never reached consensus on a path forward.\r\n\r\nHere are the options I see:\r\n\r\n1. Leave everything as-is, and accept that QUICv2 requires QUICv1 and compatible version negotiation\r\n2. Mint a new ALPN (e.g. \"h3q2\") that means \"HTTP/3 over QUICv2\" and can be used in Alt-Svc\r\n3. Add a new parameter to Alt-Svc entries that specific the QUIC version (though servers would still need to support QUICv1 for old clients that don't know the parameter)\r\n\r\nGiven that we won't be minting that many QUIC versions, one new h3 ALPN per version seems simplest to me.\r\n\r\nFor what it's worth, I feel strongly that we should get WG consensus on the path forward here before we start the WGLC on QUICv2.",
      "createdAt": "2022-01-12T21:27:27Z",
      "updatedAt": "2022-01-20T00:01:45Z",
      "closedAt": "2022-01-20T00:01:44Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Wearing no hats, option 2 is similar to how deployment have already approached supporting H3 over different QUIC v1 draft versions (albeit a bit implicitly. Something like \"h3q2<-appended draft version>\" would allow us to work on this until we are happy to mint a QUIC v2 RFC.\r\n\r\nI would like to note though that a proliferation of tokens to be used in Alt-Svc does have practical implications for Multi-CDN scenarios https://github.com/httpwg/http-extensions/issues/1673. That might be a problem that we just need to let the HTTP WG figure out though. \r\n\r\nOf the three options here, 2) seems strongest to me.",
          "createdAt": "2022-01-12T21:54:20Z",
          "updatedAt": "2022-01-12T21:54:20Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Beyond a potential explosion in ALPN registry entries, I see this as creating major obstacles to introducing and deprecating versions, if there are use cases besides h3.\r\n\r\nAfter all, a sensible QUIC implementation will accept its ALPN code from the application running on top of it. If I want to roll out a new QUIC version in a protocol implementation, any application running over it also needs to modify its code to use that version. If I want to get rid of a bad version, I have to change all the applications to truly get rid of it.\r\n\r\nCertainly, anything is scalable if we have a handful of ALPNs and versions. But this is an important tradeoff.\r\n\r\nI'd prefer (3) -- Lucas, perhaps I don't understand the MultiCDN objection, but isn't a version-specific ALPN equally awkward for a MultiCDN rollout?",
          "createdAt": "2022-01-12T22:19:18Z",
          "updatedAt": "2022-01-12T22:19:18Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "body": "This isn't about ALPN, it's really specific to Alt-Svc which is specific to HTTP. Use-cases beyond h3 don't need a new ALPN.",
          "createdAt": "2022-01-12T22:25:44Z",
          "updatedAt": "2022-01-12T22:25:44Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "> This isn't about ALPN, it's really specific to Alt-Svc which is specific to HTTP. Use-cases beyond h3 don't need a new ALPN.\r\n\r\nHmm, that substantially reduces my objection. I can live with that consensus, and if there is one we should get it in the applicability doc.",
          "createdAt": "2022-01-12T22:29:57Z",
          "updatedAt": "2022-01-12T22:29:57Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Yeah sorry, David expressed it better than me. I should clarify that both options 2 and 3 have impact on Alt-Svc.\r\n\r\nTo add to my preference on option 2. Anything that uses ALPN for reporting or logging (such as the Web's resource timing nextHopProtocol) can benefit from information encoded in the ALPN ID itself. No extra work needed to encode transport-level details. ",
          "createdAt": "2022-01-12T22:33:24Z",
          "updatedAt": "2022-01-12T22:33:24Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "To summarize some offline discussion:\r\n\r\nUsing an Alt-Svc parameter would limit impact on the ALPN registry. It would also mean that applications wouldn't need to change their advertised ALPN when their underlying QUIC implementations rolled out a new version. However, it opens up this edge case:\r\n\r\n1. A v1-only client connects via TCP to an HTTP server that supports QUICv2 but not v1\r\n2. The client is unmodified, so doesn't recognize the parameter\r\n3. Seeing \"h3\" in alt-svc, it tries to connect via QUICv1, and the VN packet says it can't. Thus it has wasted an RTT where a v2-specific ALPN would have told it not to try in the first place and stay with TCP.",
          "createdAt": "2022-01-14T18:00:28Z",
          "updatedAt": "2022-01-14T18:00:28Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Given this impact HTTP, it would be good to make the HTTP WG aware of the discussion and proposal ",
          "createdAt": "2022-01-14T22:42:01Z",
          "updatedAt": "2022-01-14T22:42:01Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Result of offline discussion with @martinthomson and @DavidSchinazi, who were the most vocal on the issue:\r\n\r\n1) We will stick with \"h3\" ALPN. Some reasons:\r\n(a) Compatible VN should totally negate any 1-RTT penalties, in practice, for v2.\r\n(b) Longer term, adding/deprecating versions is much harder if you have to update all the applications.\r\n(c) Some implementations will have great difficulty supporting different ALPNs for different versions.\r\n\r\n2) I will try to get a draft started to add a quic-version parameter to Alt-Svc. Longer term, this will avoid most of the problems for h3 over future versions. \r\n\r\n3) I will add some text encouraging v2 servers to also support v1 and compatible VN.\r\n\r\n4) We are punting the issue of incompatible versions for now. We may need to do a new ALPN, or perhaps the Alt-Svc parameter will be sufficient.",
          "createdAt": "2022-01-20T00:01:44Z",
          "updatedAt": "2022-01-20T00:01:44Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOFX7TQc5BsTBH",
      "title": "QUICv2 should not allow TLS resumption with QUICv1 tickets",
      "url": "https://github.com/quicwg/quic-v2/issues/31",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "During the discussion of https://github.com/quicwg/version-negotiation/issues/68, we came to the conclusion that it was simplest and safest to ban TLS resumption across QUIC versions. The version negotiation draft will mention this, but without normative text because TLS is not a QUIC invariant. The QUICv2 draft should add normative text to explicitly ban resuming TLS across versions.",
      "createdAt": "2022-01-13T18:19:08Z",
      "updatedAt": "2022-01-25T05:07:22Z",
      "closedAt": "2022-01-22T00:09:22Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Does this consensus apply to compatible VN? If the client initiates with v1 and a v1 resumption ticket, can the server upgrade it to v2 and still respect the 0RTT, etc?\r\n\r\nIIUC, this means that if the client connects with v1 and learns that the server does v2, but there's no upgrade, if the client decides to connect next time with v2 it can't use 0RTT because there will have been a v1 resumption ticket? Whereas an upgraded connection would have a v2 resumption ticket?",
          "createdAt": "2022-01-14T18:08:52Z",
          "updatedAt": "2022-01-14T18:08:52Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> if the client connects with v1 and learns that the server does v2\r\n\r\nWhat does this mean? How does the client \"learn\" that the server speaks v2 if the server didn't perform compatible VN from v1 to v2?",
          "createdAt": "2022-01-14T22:13:51Z",
          "updatedAt": "2022-01-14T22:13:51Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "> > if the client connects with v1 and learns that the server does v2\r\n> \r\n> What does this mean? How does the client \"learn\" that the server speaks v2 if the server didn't perform compatible VN from v1 to v2?\r\n\r\nIf the server does not upgrade, but it learns about available versions via the TP.",
          "createdAt": "2022-01-14T22:53:41Z",
          "updatedAt": "2022-01-14T22:53:41Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The server's Other Versions field exists to prevent downgrades in incompatible VN. There's no text suggesting that clients remember that information for use outside of the current connection.",
          "createdAt": "2022-01-14T23:38:16Z",
          "updatedAt": "2022-01-14T23:38:16Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "That may not have been your intent, but why wouldn't a client do this?",
          "createdAt": "2022-01-15T01:49:25Z",
          "updatedAt": "2022-01-15T01:49:25Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is hopelessly intertwined with other issues, like how we handle ALPN. I am not equipped to evaluate the claim that cross-version use of tags will cause a security problem, although as I understand it this sentiment is a concern rather than an established threat.\r\n\r\nHowever: the use case I am concerned about involves a client learning about an incompatible version via the supported_versions TP, and choosing to connect to that version. If the resumption tags aren't reusable, then it has to lose an RTT by not doing 0RTT. Relying on incompatible VN would be **two** RTTs before data arrives.\r\n\r\nGranted, v1 and v2 are not incompatible. But if it's not actually unsafe, I'd rather set a precedent that works for future, incompatible versions.",
          "createdAt": "2022-01-18T21:36:35Z",
          "updatedAt": "2022-01-18T21:36:35Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Outcome of offline discussion with @martinthomson and @DavidSchinazi:\r\n\r\n1) Clients MUST NOT use a resumption ticket from a QUIC connection and apply it to another version.\r\n\r\n2) Servers SHOULD validate that resumption tickets are not being used across QUIC versions and refuse to honor the ticket (or terminate the connection?) if they are.\r\n\r\n3) Make it clear that the resumption ticket from a connection that did compatible VN maps to the negotiated version, not the original one.",
          "createdAt": "2022-01-20T00:05:47Z",
          "updatedAt": "2022-01-20T00:05:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Wow, that was a fast shift back to \"SHOULD\".  I missed that.\r\n\r\nI did a little digging and it seems like there is a different determination for 0-RTT and resumption in our code.  Accepting 0-RTT is something that needs to be controlled, but resumption has no similar controls.  In that, we're in a similar position to @huitema.  We can't really stop resumption without first performing a little surgery on the TLS stack.\r\n\r\nWith that in mind, I'm conditionally OK with this resolution.  That's a purely pragmatic decision on my part on the basis that \"compatible\" in this case means not really changing anything about TLS.",
          "createdAt": "2022-01-25T05:07:21Z",
          "updatedAt": "2022-01-25T05:07:21Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOFX7TQc5CFTUM",
      "title": "Encourage Compatible VN",
      "url": "https://github.com/quicwg/quic-v2/issues/35",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In practice, v2 servers should also support compatible VN, as long as v1 clients are ubiquitous. To do otherwise would result in a performance penalty.",
      "createdAt": "2022-01-20T00:08:54Z",
      "updatedAt": "2022-01-22T00:01:22Z",
      "closedAt": "2022-01-22T00:01:22Z",
      "comments": []
    },
    {
      "number": 39,
      "id": "I_kwDOFX7TQc5Cd28Q",
      "title": "NEW-TOKEN tokens?",
      "url": "https://github.com/quicwg/quic-v2/issues/39",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Are NEW_TOKEN tokens reusable across versions? On current patterns, probably not, but we should write it down.",
      "createdAt": "2022-01-26T15:04:46Z",
      "updatedAt": "2022-04-28T18:22:21Z",
      "closedAt": "2022-04-28T18:22:21Z",
      "comments": [
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed, we should mirror here what we did for TLS resumption tickets",
          "createdAt": "2022-04-26T22:35:43Z",
          "updatedAt": "2022-04-26T22:35:43Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOFX7TQc5Co6Cj",
      "title": "Consider adding an optional field in QUIC-v2 header?",
      "url": "https://github.com/quicwg/quic-v2/issues/40",
      "state": "CLOSED",
      "author": "william-zk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Yet QUIC have already used CID to indicate a connection, it can also add an option field to extend the QUIC ability. Imagine scenes below:\r\n1. Set the real client IP in to QUIC packet: A common problem is that when QUIC server behind NAT, it's hard to get the real client IP address, if there is an option field, we can set the client IP address into QUIC packet, it's better than adding an Proxy-Protocol header for all QUIC packets.\r\n2. Make custom-defined-routing by QUIC possible: Just like Segment Routing and Deterministic Routing, though which are currently an IP layer function, we can still implement it by QUIC.It is common to make some routing decisions at the upper level, eg, a CDN company can always get the network conditions between all pop node in its network topology, if QUIC has the ability of setting custom routing strategy, it's easily to realize a custom source routing strategy at the UDP level for the organization, just like this:\r\n~~~\r\nQUIC-pkt(Optional field: next-hop:2.2.2.2)----->pop Node1(1.1.1.1)------direct forward packet to 2.2.2.2----->dest\r\n~~~\r\nSome UDP-based SR is under deploying(see https://datatracker.ietf.org/doc/html/draft-zartbot-sr-udp-00), and it has also achieved good benefits, but I firmly believe that implementation at QUIC level will be a better solution.\r\n",
      "createdAt": "2022-01-29T03:54:30Z",
      "updatedAt": "2022-03-27T21:36:12Z",
      "closedAt": "2022-03-27T21:36:12Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "We have strong consensus in the working group not to add new features in v2.\r\n\r\nA much more effective way to get this functionality is to write a draft that registers a new UDP option, see draft-tsvwg-udp-options. This would best be done in tsvwg, in my opinion.",
          "createdAt": "2022-03-27T21:36:08Z",
          "updatedAt": "2022-03-27T21:36:08Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOFX7TQc5FQv7f",
      "title": "Require use of version-info TP",
      "url": "https://github.com/quicwg/quic-v2/issues/42",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As described in https://github.com/quicwg/version-negotiation/pull/66, we're going to simply require all not-just-v1 servers to support the version-information transport parameter, even if they're v2-only servers.",
      "createdAt": "2022-03-07T22:54:53Z",
      "updatedAt": "2022-04-27T18:20:42Z",
      "closedAt": "2022-04-27T18:20:42Z",
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOFX7TQc5FfW7I",
      "title": "DoQ",
      "url": "https://github.com/quicwg/quic-v2/issues/44",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Now that DoQ is in the RFCEd queue, this draft should specifically state it is compatible with both registered ALPNs.",
      "createdAt": "2022-03-10T23:51:15Z",
      "updatedAt": "2022-04-26T22:46:45Z",
      "closedAt": "2022-04-26T22:46:45Z",
      "comments": []
    },
    {
      "number": 48,
      "id": "I_kwDOFX7TQc5JdfnL",
      "title": "\"keys derived from a universally known salt\"",
      "url": "https://github.com/quicwg/quic-v2/issues/48",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "> Furthermore, version 1 Initial packets are encrypted with keys derived from a universally known salt, which allow observers to inspect the contents of these packets, which include the TLS Client Hello and Server Hello messages. Again, middleboxes may ossify on the version 1 key derivation and packet formats.\r\n\r\nThis could be misread to imply the salt is universally known and universally applicable, which I don't think is your intention. In fact, I find the construction of this entire paragraph a bit awkward. Can we rephrase this for better clarity? Something like\r\n\r\n\"In QUIC version 1, Initial packets are encrypted with the version-specific salt as described in Section 5.2 of [QUIC-TLS]. Protecting Initial packets in this way allows observers to inspect their contents, which includes the TLS Clent Hello or Server Hello messages. Again, there is the potential for middleboxes to ossify on the 1 key derivation and packet formats.\"",
      "createdAt": "2022-05-11T11:22:43Z",
      "updatedAt": "2022-05-12T19:34:57Z",
      "closedAt": "2022-05-12T19:34:57Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "I_kwDOFX7TQc5JdgO5",
      "title": "Do you need to mention version aliasing explicitly in the intro?",
      "url": "https://github.com/quicwg/quic-v2/issues/49",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This might have been important earlier in the document lifetime but it seems to stick out now.",
      "createdAt": "2022-05-11T11:24:55Z",
      "updatedAt": "2022-05-12T19:36:07Z",
      "closedAt": "2022-05-12T19:36:07Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "I_kwDOFX7TQc5Jdhwj",
      "title": "Changes vs diferences",
      "url": "https://github.com/quicwg/quic-v2/issues/50",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Starting with \r\n\r\n> [3. ](https://quicwg.org/quic-v2/draft-ietf-quic-v2.html#section-3)[Changes from QUIC Version 1](https://quicwg.org/quic-v2/draft-ietf-quic-v2.html#name-changes-from-quic-version-1)\r\n\r\nThis might be a matter of style but to me the term \"changes\" imply that you're modifying the original, not creating something new. How about we term these as differences instead? The the opening paragraph of Section 3 could be something like \r\n\r\n\"QUIC version 2 endpoints MUST implement the QUIC version 1 specification as described in [[QUIC](https://quicwg.org/quic-v2/draft-ietf-quic-v2.html#QUIC)], [[QUIC-TLS](https://quicwg.org/quic-v2/draft-ietf-quic-v2.html#QUIC-TLS)], and [[RFC9002](https://quicwg.org/quic-v2/draft-ietf-quic-v2.html#RFC9002)]. However, the following differences apply in version 2.\"",
      "createdAt": "2022-05-11T11:29:55Z",
      "updatedAt": "2022-05-12T19:36:07Z",
      "closedAt": "2022-05-12T19:36:07Z",
      "comments": []
    },
    {
      "number": 51,
      "id": "I_kwDOFX7TQc5JdnjP",
      "title": "Section 3.2 packet type differences grokkability",
      "url": "https://github.com/quicwg/quic-v2/issues/51",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I find this awkward to read in isolation, it requires converting the RFC 9000 types definition format into a different encoding to realize there is a change. A clearer alternative could be\r\n\r\n\"All version 2 Long Packet Types are different:\r\n  * Initial: 0b01\r\n  * 0-RTT: 0b10\r\n  * Handshake 0b11\r\n  * Retry: 0b00",
      "createdAt": "2022-05-11T11:49:12Z",
      "updatedAt": "2022-05-12T19:36:07Z",
      "closedAt": "2022-05-12T19:36:07Z",
      "comments": []
    },
    {
      "number": 52,
      "id": "I_kwDOFX7TQc5Jdp4_",
      "title": "Section 6",
      "url": "https://github.com/quicwg/quic-v2/issues/52",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "> Devices that assume that all long headers will contain encode version 1\r\n\r\nis there a missing word here?",
      "createdAt": "2022-05-11T11:54:32Z",
      "updatedAt": "2022-05-12T19:36:08Z",
      "closedAt": "2022-05-12T19:36:08Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Nope, extra word, thanks",
          "createdAt": "2022-05-12T17:53:39Z",
          "updatedAt": "2022-05-12T17:53:39Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOFX7TQc5JdrYk",
      "title": "Consistency between \"QUIC version N\" and \"QUICvN\"",
      "url": "https://github.com/quicwg/quic-v2/issues/53",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "There a bit of inconsistency through the document. Personally I prefer the QUIC version N style.",
      "createdAt": "2022-05-11T11:58:51Z",
      "updatedAt": "2022-05-12T19:36:32Z",
      "closedAt": "2022-05-12T19:36:08Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "closed via #55",
          "createdAt": "2022-05-12T19:36:32Z",
          "updatedAt": "2022-05-12T19:36:32Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOFX7TQc5JghhD",
      "title": "Use [QUIC-INVARIANTS] instead of [RFC-8999]",
      "url": "https://github.com/quicwg/quic-v2/issues/54",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Just a style thing (and something we should try an capture in a QUIC style guide).",
      "createdAt": "2022-05-11T23:04:57Z",
      "updatedAt": "2022-05-12T19:36:21Z",
      "closedAt": "2022-05-12T19:36:08Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "closed via #55",
          "createdAt": "2022-05-12T19:36:21Z",
          "updatedAt": "2022-05-12T19:36:21Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOFX7TQc5J2qAG",
      "title": "Will abstract notes be kept or removed after publication?",
      "url": "https://github.com/quicwg/quic-v2/issues/59",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The abstract currently contains:\r\n> Note that \"version 2\" is an informal name for this proposal that indicates it is the second standards-track QUIC version. The protocol specified here will receive a version number other than 2 from IANA.\r\n>\r\n> Discussion of this work is encouraged to happen on the QUIC IETF mailing list [quic@ietf.org](https://quicwg.org/quic-v2/quic@ietf.org) or on the GitHub repository which contains the draft: https://github.com/quicwg/quic-v2.\r\n\r\nI'm pretty sure the second one won't be included, but there's no note saying so. I don't know if the first one is meant to stay. Can we add a note to make this explicit? Markdown can do it for you for the second one.",
      "createdAt": "2022-05-17T19:24:49Z",
      "updatedAt": "2022-05-20T23:00:21Z",
      "closedAt": "2022-05-20T23:00:21Z",
      "comments": [
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually the second note can be removed entirely because it repeats the paragraph that's autogenerated.",
          "createdAt": "2022-05-17T19:25:27Z",
          "updatedAt": "2022-05-17T19:25:27Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOFX7TQc5J2u7W",
      "title": "Is the version number going to stay?",
      "url": "https://github.com/quicwg/quic-v2/issues/62",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently says:\r\n> The Version field of long headers is 0x709a50c4.\r\n\r\nCould we add a note to be removed by the RFC editor that clarifies whether or not we're going to change the version number before publication or not?",
      "createdAt": "2022-05-17T19:45:50Z",
      "updatedAt": "2022-05-20T23:19:52Z",
      "closedAt": "2022-05-20T23:19:52Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixed by #68",
          "createdAt": "2022-05-20T23:19:51Z",
          "updatedAt": "2022-05-20T23:19:51Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOFX7TQc5J2w76",
      "title": "Why is the original version not authenticated?",
      "url": "https://github.com/quicwg/quic-v2/issues/64",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Draft currently states:\r\n> Note that the version of the first Initial and the subsequent Retry are not authenticated by transport parameters.\r\n\r\nIs this true? The client sends this as its Chosen Version right?",
      "createdAt": "2022-05-17T19:54:40Z",
      "updatedAt": "2022-05-20T23:19:09Z",
      "closedAt": "2022-05-20T23:19:09Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think so?\r\n\r\nIf the client receives a v1 Retry and then chooses to connect via v2 for some reason, that won't break the transcript. ",
          "createdAt": "2022-05-20T20:16:49Z",
          "updatedAt": "2022-05-20T20:16:49Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The \"for some reason\" doesn't make sense to me here. If the client follows the normative language in this document and in QUIC VN, it won't magically switch to v2 after receiving a v1 retry - it will instead send a second v1 initial which will contain the retry token and also `chosen_version=v1, other_versions=(v1,v2)`.\r\n\r\nAlso, while we're at it, what is the \"subsequent Retry\" here? Can you write up a packet diagram to explain the flow you have in mind? (on this issue not in the draft)",
          "createdAt": "2022-05-20T21:54:14Z",
          "updatedAt": "2022-05-20T21:54:14Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, I'd forgotten that in 4.1 we validate the version in the Retry token. I'll delete the sentence.",
          "createdAt": "2022-05-20T23:09:11Z",
          "updatedAt": "2022-05-20T23:09:11Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOFX7TQc5J2xmi",
      "title": "Duplicate text",
      "url": "https://github.com/quicwg/quic-v2/issues/65",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Draft currently states:\r\n> If the server's version_information transport parameter does not contain a Chosen Version field equivalent to the version in the server's Handshake packet headers, the client MUST terminate the connection with a VERSION_NEGOTIATION_ERROR.\r\n\r\nThis repeats the QUIC VN document, should we remove it?",
      "createdAt": "2022-05-17T19:57:49Z",
      "updatedAt": "2022-05-20T23:19:41Z",
      "closedAt": "2022-05-20T23:19:41Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, good catch.",
          "createdAt": "2022-05-20T20:18:57Z",
          "updatedAt": "2022-05-20T20:18:57Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixed by #68",
          "createdAt": "2022-05-20T23:19:40Z",
          "updatedAt": "2022-05-20T23:19:40Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "I_kwDOFX7TQc5J3E2Q",
      "title": "Editorial: cleanup references",
      "url": "https://github.com/quicwg/quic-v2/issues/66",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It would be nice to have the references use a consistent format (e.g. all having a name instead of the RFC number for some)",
      "createdAt": "2022-05-17T21:26:52Z",
      "updatedAt": "2022-05-20T23:19:28Z",
      "closedAt": "2022-05-20T23:19:28Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I've only left document number references where the subject is indicated beforehand, e.g.\r\n\r\nAlt-Svc {{?RFC7838}}",
          "createdAt": "2022-05-20T20:24:04Z",
          "updatedAt": "2022-05-20T20:24:04Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "fixed by #68",
          "createdAt": "2022-05-20T23:19:28Z",
          "updatedAt": "2022-05-20T23:19:28Z"
        }
      ]
    },
    {
      "number": 67,
      "id": "I_kwDOFX7TQc5KAne7",
      "title": "Editorial: I-D.ietf-dprive-dnsoquic is now RFC9250",
      "url": "https://github.com/quicwg/quic-v2/issues/67",
      "state": "CLOSED",
      "author": "rmarx",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "DNS-over-QUIC was recently finalized as RFC9250 but the doc still refers to the -12 draft of the dprive document.\r\n\r\nI'm not sure if this type of thing is usually (semi-)automatically caught during later stages of the review process, but I thought I'd mention it :) ",
      "createdAt": "2022-05-19T12:08:37Z",
      "updatedAt": "2022-05-20T20:01:59Z",
      "closedAt": "2022-05-20T20:01:58Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "It probably does, but I fixed it. Thanks!\r\n\r\nhttps://github.com/quicwg/quic-v2/commit/b960e2184b2dfc37fc3bc29d014800e6a54de6b3\r\n",
          "createdAt": "2022-05-20T20:01:58Z",
          "updatedAt": "2022-05-20T20:01:58Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOFX7TQc5QmxSz",
      "title": "AD reveiw : Minor editorial comments",
      "url": "https://github.com/quicwg/quic-v2/issues/72",
      "state": "CLOSED",
      "author": "zaheduzzaman",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- here (https://github.com/quicwg/quic-v2/blob/3d2af981f8ed63b6256aadb2fec122a2df469fc6/draft-ietf-quic-v2.md?plain=1#L50) it is better that we call it QUIC version 1 not just QUIC. As later it is referred as QUIC version 1.\r\n\r\n- here (https://github.com/quicwg/quic-v2/blob/3d2af981f8ed63b6256aadb2fec122a2df469fc6/draft-ietf-quic-v2.md?plain=1#L155) I would add reference to VN draft instead of calling it \"that document\"\r\n\r\n- here (https://github.com/quicwg/quic-v2/blob/3d2af981f8ed63b6256aadb2fec122a2df469fc6/draft-ietf-quic-v2.md?plain=1#L169) i would add \"packet\" after \"Initial\" just to be clear, as we have now a initial version in VN draft.",
      "createdAt": "2022-08-26T14:24:23Z",
      "updatedAt": "2022-08-26T19:46:54Z",
      "closedAt": "2022-08-26T19:46:45Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, fixed here\nhttps://github.com/quicwg/quic-v2/pull/74\n\nOn Fri, Aug 26, 2022 at 7:24 AM Zaheduzzaman Sarker <\n***@***.***> wrote:\n\n>\n>    -\n>\n>    here (\n>    https://github.com/quicwg/quic-v2/blob/3d2af981f8ed63b6256aadb2fec122a2df469fc6/draft-ietf-quic-v2.md?plain=1#L155)\n>    I would add reference to VN draft instead of calling it \"that document\"\n>    -\n>\n>    here (\n>    https://github.com/quicwg/quic-v2/blob/3d2af981f8ed63b6256aadb2fec122a2df469fc6/draft-ietf-quic-v2.md?plain=1#L169)\n>    i would add \"packet\" after \"Initial\" just to be clear, as we have now a\n>    initial version in VN draft.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/quicwg/quic-v2/issues/72>, or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AF2EYEIVILZKA4Z57WLAFR3V3DHSHANCNFSM57W5S3HA>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n",
          "createdAt": "2022-08-26T19:46:53Z",
          "updatedAt": "2022-08-26T19:46:53Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "I_kwDOFX7TQc5Qmye1",
      "title": "AD review : Interaction with 0-RTT packets",
      "url": "https://github.com/quicwg/quic-v2/issues/73",
      "state": "CLOSED",
      "author": "zaheduzzaman",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 7.3 in draft-ietf-quic-version-negotiation-09 required new versions to define interaction with 0-RTT packets. I am missing the interaction when 0-RTT packets are in client's first flight. This is a MUST requirement (of course the spec need to be approved, but we are doing VN and V2 work at the same time) that need to be followed.",
      "createdAt": "2022-08-26T14:27:55Z",
      "updatedAt": "2022-08-29T21:13:44Z",
      "closedAt": "2022-08-29T21:13:43Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "At the very end of [Section 4.1](https://quicwg.org/quic-v2/draft-ietf-quic-v2.html#name-compatible-negotiation-requ): \r\n\r\n> The client MUST NOT send 0-RTT packets using the negotiated version, even after processing a packet of that version from the server. Servers can apply original version 0-RTT packets to a connection without additional considerations.\r\n\r\nAnything more you want to see there?",
          "createdAt": "2022-08-26T19:49:51Z",
          "updatedAt": "2022-08-26T19:49:51Z"
        },
        {
          "author": "zaheduzzaman",
          "authorAssociation": "NONE",
          "body": "Section 4.1 prohibits the client to send 0-RTT packets using negotiated version,  but does not say anything about how to handle the case when client sends 0-RTT packets in the first flight (with original version). as far as I can see , the VN draft requires new version documents to deal with this case - \r\n`If a future document\r\n   wishes to define compatibility between two versions that support\r\n   0-RTT, that document MUST address the scenario where there are 0-RTT\r\n   packets in the client's first flight. `\r\n\r\nlet me know if I am misinterpreting something here. and if I am then this requires to be more clear in the text of this spec.",
          "createdAt": "2022-08-27T06:51:52Z",
          "updatedAt": "2022-08-27T06:51:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "I think that the existing text is more or less fine, maybe with an edit.\r\n\r\n> Servers can apply original version 0-RTT packets to a connection without additional considerations.\r\n\r\nI might have instead said:\r\n\r\n> Servers can accept 0-RTT and then process 0-RTT packets from the original version.\r\n\r\nThe \"additional considerations\" phrasing doesn't make a lot of sense to me.  I know what it means, but only because I know what it should mean.",
          "createdAt": "2022-08-29T01:42:08Z",
          "updatedAt": "2022-08-29T01:42:08Z"
        },
        {
          "author": "zaheduzzaman",
          "authorAssociation": "NONE",
          "body": "@martinthomson 's proposal makes it clearer, yes. that will do!!",
          "createdAt": "2022-08-29T08:47:23Z",
          "updatedAt": "2022-08-29T08:47:23Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "SGTM, fixed via https://github.com/quicwg/quic-v2/commit/3e690dc047a64deaafbde80cc636989096617c33",
          "createdAt": "2022-08-29T21:13:43Z",
          "updatedAt": "2022-08-29T21:13:43Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOFX7TQc5Twfyy",
      "title": "How should endpoints react to differences between long header version and chosen version",
      "url": "https://github.com/quicwg/quic-v2/issues/76",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In https://github.com/quicwg/version-negotiation/issues/129, @anrossi points out two scenarios where endpoint handling isn't clear:\r\n\r\n* Scenario 1:\r\n  * A QUIC server receives an INITIAL where LongHeaderVersion=v1 and ChosenVersion=v2\r\n* Questions for scenario 1:\r\n  * Should the server close the connection?\r\n  * If so, what error should the server use?\r\n  * Or should the server ignore the long header versions?\r\n  * Same question if v1 and v2 are inverted.\r\n\r\n* Scenario 2:\r\n  * Client sends a QUICv1 INITIAL with ChosenVersion=v1 and OtherVersions=v1,v2\r\n  * Client receives server reply HANDSHAKE where LongHeaderVersion=v1 and ChosenVersion=v2\r\n* Questions for scenario 2:\r\n  * Should the client close the connection?\r\n  * If so, what error should the client use?\r\n  * Or should the client ignore the long header versions?\r\n  * Same question if v1 and v2 are inverted.",
      "createdAt": "2022-10-11T20:59:27Z",
      "updatedAt": "2022-10-13T21:58:08Z",
      "closedAt": "2022-10-13T21:58:08Z",
      "comments": [
        {
          "author": "anrossi",
          "authorAssociation": "NONE",
          "body": "For scenario 1:\r\n- The server should close the connection because the transport parameter does not match the header, which might indicate tampering with the packet header (maybe by a pesky middlebox)\r\n- Since this occurs during parsing of the transport parameters, using the transport parameter error makes sense to me. However, it could also be argued that since it's the version negotiation transport parameter, that the version negotiation error should be used instead.\r\n- Server ignoring the header version is a bold move, and it removes one vector for bad actors to force QUIC connections to fail, but it also removes a way for the server to detect interference with the connection. If the course of QUIC is to move away from using/trusting the long header version field, then this would be a strong step in that direction.\r\n- I think all I've said above still applies when the versions are reversed.\r\n\r\nIn scenario 2:\r\nAren't the server's transport parameters encrypted with the HANDSHAKE keys instead of INITIAL? So, the INITIAL packet with LongHeaderVersion=v1 wouldn't matter until the client processed the HANDSHAKE LongHeaderVersion?",
          "createdAt": "2022-10-11T22:12:33Z",
          "updatedAt": "2022-10-11T22:12:33Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> For scenario 1: \r\n\r\nI agree with you on all points. When it comes to which error, I don't much care which one it is, but we should pick one and specify it.\r\n\r\n> In scenario 2: Aren't the server's transport parameters encrypted with the HANDSHAKE keys instead of INITIAL? So, the INITIAL packet with LongHeaderVersion=v1 wouldn't matter until the client processed the HANDSHAKE LongHeaderVersion?\r\n\r\nYou're right, I've edited my comment above to mention HANDSHAKE instead of INITIAL for that packet\r\n\r\n",
          "createdAt": "2022-10-11T22:46:26Z",
          "updatedAt": "2022-10-11T22:46:26Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I have some text ready, but am waiting to see what the v1 draft specifies when long_header = v1 and chosen_version = unknown.",
          "createdAt": "2022-10-12T01:32:57Z",
          "updatedAt": "2022-10-12T01:32:57Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed: let's wait to see how we resolve https://github.com/quicwg/version-negotiation/issues/129 before merging anything here.",
          "createdAt": "2022-10-12T21:47:19Z",
          "updatedAt": "2022-10-12T21:47:19Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/quicwg/version-negotiation/issues/129 essentially solves this issue, but #78 is relevant to close the loop in the v2 draft. Closing this one.",
          "createdAt": "2022-10-13T21:58:08Z",
          "updatedAt": "2022-10-13T21:58:08Z"
        }
      ]
    },
    {
      "number": 78,
      "id": "I_kwDOFX7TQc5T20cJ",
      "title": "How does the client learn the negotiated version?",
      "url": "https://github.com/quicwg/quic-v2/issues/78",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Let's assume the current scenario: the client sends `Long header = 1, ChosenVersion=1 ; AvailableVersions=(1,2)` and the server decides to do compatible VN v1-to-v2. Then the server send its ServerHello in an INITIAL at v1 (the draft explicitly allows this by making it a SHOULD and not a MUST: `The server SHOULD start sending its Initial packets using the negotiated version as soon as it decides to change.`).\r\n\r\nAt this point, there have only been QUICv1 packets exchanged. So the client can install handshake send keys for either version, but it is supposed to meet this requirement: `Both endpoints MUST send Handshake or 1-RTT packets using the negotiated version.` even though the client doesn't yet know what the negotiated version is.\r\n\r\nWe have text in the right direction: `Once the client has processed a packet using the negotiated version, it SHOULD send subsequent Initial packets using that version.` but that's not quite enough, we need to explain that the client learns about the version switch form the long headers and then validates it when it receives the server's ChosenVersion",
      "createdAt": "2022-10-12T22:31:39Z",
      "updatedAt": "2022-10-20T16:53:00Z",
      "closedAt": "2022-10-20T16:53:00Z",
      "comments": [
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since we've closed #76, let me reiterate a test case here that we need to make sure is handled by the resolution of this issue:\r\n* Client sends an INITIAL(ClientHello) where LongHeaderVersion=v1, ChosenVersion=v1, and OtherVersions=v1,v2\r\n* Client receives server INITIAL(ServerHello) where LongHeaderVersion=v1\r\n* Client receives server HANDSHAKE(EncryptedExtensions) where LongHeaderVersion=v1, ChosenVersion=v2, and OtherVersions=v1,v2",
          "createdAt": "2022-10-13T22:05:36Z",
          "updatedAt": "2022-10-13T22:05:36Z"
        },
        {
          "author": "anrossi",
          "authorAssociation": "NONE",
          "body": "Shouldn't the server have the LongHeaderVersion=v2 on its HANDSHAKE packets, once it has upgraded the connection to the negotiated version?",
          "createdAt": "2022-10-13T22:07:05Z",
          "updatedAt": "2022-10-13T22:07:05Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes the server isn't supposed to do that (sorry I should have made the clear). The question is: what should the client do when it sees the server misbehaving like this?",
          "createdAt": "2022-10-13T22:08:38Z",
          "updatedAt": "2022-10-13T22:08:38Z"
        },
        {
          "author": "anrossi",
          "authorAssociation": "NONE",
          "body": "If we're in agreement the server is misbehaving, then I would suggest the client close the connection. ",
          "createdAt": "2022-10-13T22:15:09Z",
          "updatedAt": "2022-10-13T22:15:09Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI1MzcxNjkz",
      "title": "alpn text",
      "url": "https://github.com/quicwg/quic-v2/pull/6",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "One way to fix #5 ",
      "createdAt": "2021-04-28T16:18:08Z",
      "updatedAt": "2021-06-02T18:22:48Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "eb1b70ee4e069483599e798a9432bc1fc7c7a120",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "alpn",
      "headRefOid": "9e74378765f92e4dd7d1da6897cf6241ec7cd8b5",
      "closedAt": "2021-06-02T18:22:48Z",
      "mergedAt": "2021-06-02T18:22:48Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "0abe99f92456b09314e786b6e271bcec66ce76d5"
      },
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "NONE",
          "body": "I have a feeling you'll need to say that this \"updates\" HTTP/3.",
          "createdAt": "2021-04-28T20:55:36Z",
          "updatedAt": "2021-04-28T20:55:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwMjkxMzE5",
      "title": "sync with main",
      "url": "https://github.com/quicwg/quic-v2/pull/8",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-02T18:21:50Z",
      "updatedAt": "2021-06-02T18:23:33Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "alpn",
      "baseRefOid": "9e74378765f92e4dd7d1da6897cf6241ec7cd8b5",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "main",
      "headRefOid": "0abe99f92456b09314e786b6e271bcec66ce76d5",
      "closedAt": "2021-06-02T18:23:33Z",
      "mergedAt": "2021-06-02T18:23:33Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "68020698e4d9fe9db02478ff6751fb474b3a5534"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOFX7TQc4u4M6d",
      "title": "convert filename to -ietf",
      "url": "https://github.com/quicwg/quic-v2/pull/11",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-22T22:53:42Z",
      "updatedAt": "2022-01-04T21:19:41Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "79f0607cbbf8331a6ee6d2705fa00ca39909d49d",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "update-name",
      "headRefOid": "030e4774e787009a9ad6cfd9c6fec7981bbb11ca",
      "closedAt": "2021-11-22T22:54:37Z",
      "mergedAt": "2021-11-22T22:54:37Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "88132694f806e3a1ed76e5d3a4cef05eb565b42c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 12,
      "id": "PR_kwDOFX7TQc4u4OZW",
      "title": "Fix #10: support all extensions",
      "url": "https://github.com/quicwg/quic-v2/pull/12",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-22T23:05:40Z",
      "updatedAt": "2022-01-04T21:19:42Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "a834768d2dddaab2b77478e3bb4b9b68be4c0fd4",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "extensions",
      "headRefOid": "420ffc320bf70441b6f18de0af2cec3ef0ccdffe",
      "closedAt": "2021-11-22T23:06:25Z",
      "mergedAt": "2021-11-22T23:06:25Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "287bdcf88a2ff8fdb257ef6d8e60b59d62ad0421"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOFX7TQc4u7Fp3",
      "title": "Fix typo in Key Updates label",
      "url": "https://github.com/quicwg/quic-v2/pull/13",
      "state": "MERGED",
      "author": "IvanNardi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-23T18:35:53Z",
      "updatedAt": "2021-11-23T18:51:15Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "9d29f07d8743238c363c278c68f72715c5efec5b",
      "headRepository": "IvanNardi/quic-v2",
      "headRefName": "key-update",
      "headRefOid": "64ac9f36cae4ec2057485ef65b81a65f8b2df1dd",
      "closedAt": "2021-11-23T18:43:15Z",
      "mergedAt": "2021-11-23T18:43:14Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "4557dc73f1b3caa8f7b81077791babd6d6f5f153"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4whW_k",
          "commit": {
            "abbreviatedOid": "64ac9f3"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-23T18:41:37Z",
          "updatedAt": "2021-11-23T18:41:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOFX7TQc4viLq5",
      "title": "Semi-automatic update of venue information",
      "url": "https://github.com/quicwg/quic-v2/pull/16",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-08T05:00:29Z",
      "updatedAt": "2021-12-08T05:03:29Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "4557dc73f1b3caa8f7b81077791babd6d6f5f153",
      "headRepository": "martinthomson/quic-v2",
      "headRefName": "venue",
      "headRefOid": "8fb8a54a80a4160e3eed2210cca624315096409b",
      "closedAt": "2021-12-08T05:03:29Z",
      "mergedAt": "2021-12-08T05:03:29Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "a9ffd031aa43cd913b9b7b3d5e1dbdee8ad8a93e"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "(If you are looking to do this for yourself on other repos, you can copy the venue fields from https://github.com/martinthomson/internet-draft-template/blob/main/draft-todo-yourname-protocol.md into your draft and run `make update-venue`.)",
          "createdAt": "2021-12-08T05:01:22Z",
          "updatedAt": "2021-12-08T05:01:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 18,
      "id": "PR_kwDOFX7TQc4wh8yj",
      "title": "change author affiliation",
      "url": "https://github.com/quicwg/quic-v2/pull/18",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-04T21:13:38Z",
      "updatedAt": "2022-01-04T21:19:39Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "a9ffd031aa43cd913b9b7b3d5e1dbdee8ad8a93e",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "author",
      "headRefOid": "ba2723ed32b526669e18dc92a05f8e030881761b",
      "closedAt": "2022-01-04T21:18:17Z",
      "mergedAt": "2022-01-04T21:18:17Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "4e7ae98a2ec5089139693b7135a0ebcbc5177c0c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "PR_kwDOFX7TQc4wiJlU",
      "title": "Rules for compatible VN",
      "url": "https://github.com/quicwg/quic-v2/pull/19",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #14 and fixes #15.\r\n\r\nI could be persuaded that some of the choices made here are not the best.",
      "createdAt": "2022-01-04T22:58:16Z",
      "updatedAt": "2022-01-12T17:19:54Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "4e7ae98a2ec5089139693b7135a0ebcbc5177c0c",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "update-narrative",
      "headRefOid": "5cfe3115d2587d83f554b9d1d6c8ae8517c43fa1",
      "closedAt": "2022-01-07T20:29:43Z",
      "mergedAt": "2022-01-07T20:29:43Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "201b8b779c9bf2091b6a2ae083deeaad29929c5b"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Oops, I posted #24, which is almost exactly the same.  My bad.\r\n\r\nThe 0-RTT thing is one I might contest here.  It is possible to accept 0-RTT if you have a compatible upgrade, but I'm not sure that you ever need it.  The situations in which you can use 0-RTT without knowing what version is in use are few.  All the client has to do is remember the negotiated version from last time and use that version.",
          "createdAt": "2022-01-05T03:00:39Z",
          "updatedAt": "2022-01-05T03:00:39Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I take it we've reached rough consensus that 0RTT has value, though no one will force MT to accept those packets.\r\n\r\nI'm going to merge this, and fix #23 in a separate PR (taking text from #24)",
          "createdAt": "2022-01-07T20:29:37Z",
          "updatedAt": "2022-01-07T20:29:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4yT7U-",
          "commit": {
            "abbreviatedOid": "5cfe311"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "The text reflects the consensus so far. I have to update my implementation to ensure that it follows these rules exactly, in particular for 0RTT, might add comments when that implementation is tested.",
          "createdAt": "2022-01-04T23:04:56Z",
          "updatedAt": "2022-01-04T23:04:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc4ykyIq",
          "commit": {
            "abbreviatedOid": "5cfe311"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T00:58:40Z",
          "updatedAt": "2022-01-11T01:15:17Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I would prefer:\r\n\r\n> Before the server is able to process transport parameters from the client, it might need to respond to Initial packets from the client. For these packets the server uses the original version.",
              "createdAt": "2022-01-11T00:58:40Z",
              "updatedAt": "2022-01-11T01:15:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4ytejk",
          "commit": {
            "abbreviatedOid": "5cfe311"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T17:19:54Z",
          "updatedAt": "2022-01-12T17:19:54Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Thanks, made the change here: https://github.com/quicwg/quic-v2/commit/f3f21c846d978c66e5cb5643cdf4c1978e2d0c69",
              "createdAt": "2022-01-12T17:19:54Z",
              "updatedAt": "2022-01-12T17:19:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOFX7TQc4wiZd4",
      "title": "Improve cross referencing",
      "url": "https://github.com/quicwg/quic-v2/pull/22",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This uses kramdown tricks to make real links for the section references\r\nto RFC 9001 and uses a nicer label for those.",
      "createdAt": "2022-01-05T01:37:37Z",
      "updatedAt": "2022-01-05T02:51:15Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "4e7ae98a2ec5089139693b7135a0ebcbc5177c0c",
      "headRepository": "martinthomson/quic-v2",
      "headRefName": "xrefs",
      "headRefOid": "9b7450a80cd33ea93f81756cbe75b7443a895a50",
      "closedAt": "2022-01-05T02:51:15Z",
      "mergedAt": "2022-01-05T02:51:15Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "a28650478ef0dc3886d786ba31b810ec3fc830de"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4yURPY",
          "commit": {
            "abbreviatedOid": "9b7450a"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-05T02:51:05Z",
          "updatedAt": "2022-01-05T02:51:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOFX7TQc4wibB1",
      "title": "What I learned about compatible versions",
      "url": "https://github.com/quicwg/quic-v2/pull/24",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This is what the version negotiation draft requires of a document that\r\ndefines compatible version negotiation.  The answers I've used here are\r\nbased on my own experience implementing this.  Others might have a\r\ndifferent experience.\r\n\r\nCloses #23.",
      "createdAt": "2022-01-05T01:58:15Z",
      "updatedAt": "2022-01-12T22:59:17Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "4e7ae98a2ec5089139693b7135a0ebcbc5177c0c",
      "headRepository": "martinthomson/quic-v2",
      "headRefName": "vn",
      "headRefOid": "38717e81b0b7c83204ed75ac4b33e34802e7fe36",
      "closedAt": "2022-01-12T22:59:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "@huitema, does this match your understanding?",
          "createdAt": "2022-01-05T01:59:06Z",
          "updatedAt": "2022-01-05T01:59:06Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, I see the Retry bit now",
          "createdAt": "2022-01-05T03:27:12Z",
          "updatedAt": "2022-01-05T03:27:12Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe #19 and #26 handled this with similar text",
          "createdAt": "2022-01-12T22:59:17Z",
          "updatedAt": "2022-01-12T22:59:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4yURs8",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Huh. #19 and #24 post the same day. @huitema suggested #19 matches his experience.\r\n\r\nAlso, this doesn't seem to address the bit about Retry validation in #23?\r\n\r\nTomorrow I can see if there's anything to synthesize between the two.",
          "createdAt": "2022-01-05T02:56:29Z",
          "updatedAt": "2022-01-05T02:56:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc4yURxM",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T02:57:17Z",
          "updatedAt": "2022-01-05T02:58:02Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Given the differing labels, all the protection is different, no?",
              "createdAt": "2022-01-05T02:57:17Z",
              "updatedAt": "2022-01-05T02:58:02Z"
            },
            {
              "originalPosition": 40,
              "body": "Is there a reason for this? It seems like a disincentive to upgrade.",
              "createdAt": "2022-01-05T02:57:58Z",
              "updatedAt": "2022-01-05T02:58:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yUSKC",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T03:01:28Z",
          "updatedAt": "2022-01-05T03:01:28Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Good point.",
              "createdAt": "2022-01-05T03:01:28Z",
              "updatedAt": "2022-01-05T03:01:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yUSiM",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T03:05:19Z",
          "updatedAt": "2022-01-05T03:05:19Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Maybe.  Though the number of cases where you get to deploy a whole new version and continue to use 0-RTT across the upgrade is small.  You will mostly have a previous connection in the negotiated version, so you can remember which was used and attempt that straight up.  It is only during the rollout of v2 that you need to worry about maybe accepting v2 and rejecting 0-RTT.\r\n\r\nIn our stack, it is completely non-trivial to calculate v1 0-RTT keys once you have negotiated v2.  Given how narrow the applicability is, it seems much safer to reject.\r\n\r\nOf course, you could just make rejection discretionary.",
              "createdAt": "2022-01-05T03:05:19Z",
              "updatedAt": "2022-01-05T03:05:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yUVdH",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T03:42:08Z",
          "updatedAt": "2022-01-05T03:42:08Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Let see. To Martin's point, I have only partially tested usage of 0-RTT with resumption, always resuming with V1.\r\n\r\nA server negotiates 0-RTT if it has received a session resumption ticket during the previous handshake. Session tickets are carried in crypto frames in 1-RTT packets, thus after the transport parameters have been negotiated. It seems we can have the following:\r\n\r\n1) Client initiates a V1 session, also proposes V2, server negotiates V2, indicates V2 support, and sends a resumption ticket.\r\n\r\n2) Client initiates a V1 session, also proposes V2, server negotiates V2, does not indicates V2 support, and sends a resumption ticket.\r\n\r\n3) Client initiates a V1 session, also proposes V2, server negotiates V1 and sends a resumption ticket.\r\n\r\n4) Client initiates a V1 session, does not propose alternative. Server sends a resumption ticket.\r\n\r\nIt seems to me that in case #1, the client should resume a session using V2, including for 0-RTT. In case #2, #3 and #4, it should resume using V1. Case #4 is plain V1, which implies support of 0-RTT. It would be bizarre to allow 0RTT in case #4 but not in cases #2 and #3.",
              "createdAt": "2022-01-05T03:42:08Z",
              "updatedAt": "2022-01-05T03:42:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yUWHz",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T03:50:00Z",
          "updatedAt": "2022-01-05T03:50:01Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I'm not following case 2.  Did you mean that the server negotiates v2, but does not support v1?  You can't use compatible negotiation for that, I think.\r\n\r\nCases 3 and 4 are clear cut cases where the only mutually supported version is v1, just that one has VN support and the other doesn't.\r\n\r\nThe case that is potentially interesting is this: Client offers v1 and v2.  Server only supports v1 so it uses that and sends a 0-RTT-capable ticket.  Server upgrades to add v2 support.  Client then makes a new connection with v1 and 0-RTT.  Server is forced to choose between a compatible upgrade and 0-RTT.",
              "createdAt": "2022-01-05T03:50:01Z",
              "updatedAt": "2022-01-05T03:50:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yXmlr",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T20:46:35Z",
          "updatedAt": "2022-01-05T20:46:36Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "The server response contains the selected version and a list of supported versions. Case #2 happens when the selected version is V2, but the list of supported versions only contains V1. That would be a reasonable thing to do by a server in a big farm. The server itself supports V2, but not all servers in the farm do, so the server is telling the client that it would be reasonable to use V1 in the new connections.",
              "createdAt": "2022-01-05T20:46:35Z",
              "updatedAt": "2022-01-05T20:46:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yX8SY",
          "commit": {
            "abbreviatedOid": "38717e8"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-05T22:50:46Z",
          "updatedAt": "2022-01-05T22:50:46Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Good point.  I missed that nuance.  That increases the potential value of doing 0-RTT in the original version.",
              "createdAt": "2022-01-05T22:50:46Z",
              "updatedAt": "2022-01-05T22:50:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 26,
      "id": "PR_kwDOFX7TQc4wzywb",
      "title": "Retry rules",
      "url": "https://github.com/quicwg/quic-v2/pull/26",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #23 ",
      "createdAt": "2022-01-11T16:21:09Z",
      "updatedAt": "2022-01-19T01:00:31Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "50fe07f8dbad88c25a272d5012487e6be1f4cc23",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "retry-rules",
      "headRefOid": "e57d5793dab6b2db843b2ff8fa85d63942d07487",
      "closedAt": "2022-01-12T22:58:19Z",
      "mergedAt": "2022-01-12T22:58:19Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "bb3fc8663ccc14b9b9ec840f40add73f5edeae74"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson fixed up IAW with your comments. PTAL",
          "createdAt": "2022-01-12T17:10:21Z",
          "updatedAt": "2022-01-12T17:10:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4yp85p",
          "commit": {
            "abbreviatedOid": "d2aef23"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T00:20:18Z",
          "updatedAt": "2022-01-12T00:23:27Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I think that you want to say what the client does with a Retry in a version other than the original: it ignores it.",
              "createdAt": "2022-01-12T00:20:18Z",
              "updatedAt": "2022-01-12T00:23:27Z"
            },
            {
              "originalPosition": 7,
              "body": "This MUST NOT doesn't really make much sense as the client won't have any information from the server that might even suggest the possibility that a different version would work.",
              "createdAt": "2022-01-12T00:21:01Z",
              "updatedAt": "2022-01-12T00:23:27Z"
            },
            {
              "originalPosition": 10,
              "body": "As noted, this is probably not really necessary, but it's fine.",
              "createdAt": "2022-01-12T00:21:24Z",
              "updatedAt": "2022-01-12T00:23:28Z"
            },
            {
              "originalPosition": 15,
              "body": "This first sentence might not be clear because it refers to text in a specific version.  Maybe you could reiterate that \"QUIC version 2 uses the same transport parameters to authenticate the Retry as QUIC version 1.\"",
              "createdAt": "2022-01-12T00:23:22Z",
              "updatedAt": "2022-01-12T00:23:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4ytaaZ",
          "commit": {
            "abbreviatedOid": "d2aef23"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T17:05:16Z",
          "updatedAt": "2022-01-12T17:05:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I agree that this is a silly thing for the client to do, but I'm all for forbidding silly things to simplify the code. It does give the freedom for the server to have version-specific retry tokens, which is useless in v2 but probably establishes a better pattern for other versions.",
              "createdAt": "2022-01-12T17:05:16Z",
              "updatedAt": "2022-01-12T17:05:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4ytacy",
          "commit": {
            "abbreviatedOid": "d2aef23"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T17:05:23Z",
          "updatedAt": "2022-01-12T17:05:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "yep",
              "createdAt": "2022-01-12T17:05:23Z",
              "updatedAt": "2022-01-12T17:05:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yupGR",
          "commit": {
            "abbreviatedOid": "0110e9f"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-12T22:54:25Z",
          "updatedAt": "2022-01-12T22:54:26Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nin {{Section 7.3 of QUIC}}. Note that the version of the first Initial and the subsequent Retry\r\n```",
              "createdAt": "2022-01-12T22:54:26Z",
              "updatedAt": "2022-01-12T22:54:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4yupHR",
          "commit": {
            "abbreviatedOid": "0110e9f"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-12T22:54:31Z",
          "updatedAt": "2022-01-12T22:54:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOFX7TQc4w0A4b",
      "title": "grease packet types",
      "url": "https://github.com/quicwg/quic-v2/pull/27",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #7 \r\n\r\nAlso, add structure to the \"changes from v1\" section.",
      "createdAt": "2022-01-11T17:26:50Z",
      "updatedAt": "2022-01-12T16:26:47Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "72e206c1449a253218c86721cab1e5b51f520561",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "grease-type",
      "headRefOid": "7fae311a83e4c8bb5351da9e1869a171e932cb1a",
      "closedAt": "2022-01-12T16:26:32Z",
      "mergedAt": "2022-01-12T16:26:32Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "50fe07f8dbad88c25a272d5012487e6be1f4cc23"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 28,
      "id": "PR_kwDOFX7TQc4w0GIQ",
      "title": "random version number",
      "url": "https://github.com/quicwg/quic-v2/pull/28",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #20 ",
      "createdAt": "2022-01-11T17:53:58Z",
      "updatedAt": "2022-01-12T16:26:49Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "201b8b779c9bf2091b6a2ae083deeaad29929c5b",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "new-version",
      "headRefOid": "ae95ee33ab674e57a627d0044fdaa28b2f4b8a94",
      "closedAt": "2022-01-12T16:23:31Z",
      "mergedAt": "2022-01-12T16:23:31Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "72e206c1449a253218c86721cab1e5b51f520561"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 29,
      "id": "PR_kwDOFX7TQc4w0Ood",
      "title": "Loosen requirement to support VN",
      "url": "https://github.com/quicwg/quic-v2/pull/29",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #25 ",
      "createdAt": "2022-01-11T18:42:47Z",
      "updatedAt": "2022-01-12T20:11:49Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "50fe07f8dbad88c25a272d5012487e6be1f4cc23",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "min-vn",
      "headRefOid": "77df5a244c2c764316c0c311c83591f38f1b1301",
      "closedAt": "2022-01-12T20:11:37Z",
      "mergedAt": "2022-01-12T20:11:36Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "74b9ee7f9883a672098ec1385d2f994107eb03f9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4yt5j6",
          "commit": {
            "abbreviatedOid": "77df5a2"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "It's not entirely clear what minimal support is, but we have an issue for that :-)",
          "createdAt": "2022-01-12T19:02:50Z",
          "updatedAt": "2022-01-12T19:02:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOFX7TQc4xDhXh",
      "title": "Alpn",
      "url": "https://github.com/quicwg/quic-v2/pull/32",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #30.\r\n\r\nI would personally prefer that we just add a Alt-Svc parameter and suck up the (likely rare) edge cases where this causes a 1RTT penalty, but making an exception for HTTP/3 seems like a reasonable compromise.\r\n\r\nI'm open to the idea that this document now updates draft-ietf-http-quic, or even RFC7301. Just let me know if you think I should add it.",
      "createdAt": "2022-01-14T19:01:43Z",
      "updatedAt": "2022-01-20T00:02:18Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "bb3fc8663ccc14b9b9ec840f40add73f5edeae74",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "alpn",
      "headRefOid": "43723dea09ee7ed82d92bcac0896fe0399d31660",
      "closedAt": "2022-01-20T00:02:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "@DavidSchinazi PTAL",
          "createdAt": "2022-01-15T01:47:31Z",
          "updatedAt": "2022-01-15T01:47:31Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed the underlying issue with no action (see further comments in #30)",
          "createdAt": "2022-01-20T00:02:17Z",
          "updatedAt": "2022-01-20T00:02:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4y3j8i",
          "commit": {
            "abbreviatedOid": "18bd1b0"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "FWIW, this document doesn't need to update draft-ietf-http-quic or RFC7301 because it doesn't change them at all. RFC 9001 didn't update 7301.",
          "createdAt": "2022-01-14T22:15:35Z",
          "updatedAt": "2022-01-14T22:30:02Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nattempt to use a QUIC version that the server does not support. Therefore, HTTP/3 is an\r\n```",
              "createdAt": "2022-01-14T22:15:35Z",
              "updatedAt": "2022-01-14T22:30:02Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nThe Alt-Svc HTTP field {{?RFC7838}} allows an HTTP server to inform clients of\r\nwhich versions of HTTP it supports. However, in order to use this information, clients\r\nalso need to select a transport protocol that can carry HTTP.\r\nIf multiple QUIC versions were to use the same ALPN to refer to HTTP/3, a\r\n```",
              "createdAt": "2022-01-14T22:20:40Z",
              "updatedAt": "2022-01-14T22:30:02Z"
            },
            {
              "originalPosition": 23,
              "body": "I would prefer this bikeshed to be painted in \"h3q2\" color, because \"h3v2\" sounds like a revision of HTTP/3 to me",
              "createdAt": "2022-01-14T22:21:47Z",
              "updatedAt": "2022-01-14T22:30:02Z"
            },
            {
              "originalPosition": 45,
              "body": "We need to do the same thing that we did during h3 development, which is to add draft versions: `h3v2-03` refers to \"HTTP/3 over draft-ietf-quic-v2-03\"",
              "createdAt": "2022-01-14T22:25:07Z",
              "updatedAt": "2022-01-14T22:30:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y3oxg",
          "commit": {
            "abbreviatedOid": "bb00f38"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-14T22:52:51Z",
          "updatedAt": "2022-01-14T22:52:51Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "The next version of the draft is intended to use the final version and ALPN.",
              "createdAt": "2022-01-14T22:52:51Z",
              "updatedAt": "2022-01-14T22:52:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y3s89",
          "commit": {
            "abbreviatedOid": "bb00f38"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-14T23:36:05Z",
          "updatedAt": "2022-01-14T23:36:05Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Uh... I'd be more comfortable trying out a draft in production before we burn the codepoints. The QUIC version can always be regenerated randomly, but the ALPN codepoint would be trickier",
              "createdAt": "2022-01-14T23:36:05Z",
              "updatedAt": "2022-01-14T23:36:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y30gu",
          "commit": {
            "abbreviatedOid": "b751344"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T01:45:42Z",
          "updatedAt": "2022-01-15T01:45:42Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "OK, h3q2-01",
              "createdAt": "2022-01-15T01:45:42Z",
              "updatedAt": "2022-01-15T01:45:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y31cg",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T02:16:50Z",
          "updatedAt": "2022-01-15T02:16:50Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I find this whole paragraph a bit confusing because of the different concepts getting munged together. V2 doesn't change how the TLS handshake works, so why are we saying that most of ALPN can work. \r\n\r\nIn my mind it might be clear to state something like it is expected that applications can use QUIC v2 as a direct substitute for QUIC v1 but that there may be implications for how endpoints discover or agree upon the wire version in tandem with authenticated negotiation of an application protocol. For instance, an additional round trip if a client attempts v2 with a v1-only server. We could then go on to to talk about ALPN and rephrase the requirement to say that protocols that would like to avoid performance or interoperability concerns MAY define new ALPN identifiers that explicitly require QUICv2.",
              "createdAt": "2022-01-15T02:16:50Z",
              "updatedAt": "2022-01-15T02:16:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y31zs",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T02:28:59Z",
          "updatedAt": "2022-01-15T02:28:59Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Slight nit. Talk of Alt-Svc this isn't outright wrong but it could be more accurate to say something like\r\n\r\nHTTP Alternative Services (Alt-Svc) {{?RFC8738}} allow servers to nominate alternative means of interaction such as on a different host, port or protocol. Alt-Svc is the often used to advertise server support for HTTP/3 by including the \"h3\" ALPN identifier. When clients decide to connect to an HTTP/3 alternate service, they need to select a QUIC version to use. ",
              "createdAt": "2022-01-15T02:28:59Z",
              "updatedAt": "2022-01-15T02:28:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y312m",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T02:30:47Z",
          "updatedAt": "2022-01-15T02:30:47Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "You might rephrase this like\r\n\r\nIf the \"h3\" ALPN identifier applied to HTTP/3 over many versions of QUIC",
              "createdAt": "2022-01-15T02:30:47Z",
              "updatedAt": "2022-01-15T02:30:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y314x",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T02:32:16Z",
          "updatedAt": "2022-01-15T02:32:16Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "is the problem solely from TCP to QUIC? Maybe just simplify the lines to \r\n\r\na client might discover HTTP/3 support and then attempt to use a QUIC version the server does not support",
              "createdAt": "2022-01-15T02:32:16Z",
              "updatedAt": "2022-01-15T02:32:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y318y",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T02:35:09Z",
          "updatedAt": "2022-01-15T02:35:09Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "what is an unmodified application? HTTP/3 settings come after the TLS handshake so there's not a way to predict what the application might do beyond the ALPN",
              "createdAt": "2022-01-15T02:35:09Z",
              "updatedAt": "2022-01-15T02:35:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y32JR",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T02:45:32Z",
          "updatedAt": "2022-01-15T02:45:32Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "wrong line (sorry) but this MUST NOT advertise \"h3\" requirement seems hard to implement in practice. Plus the server advertising \"h3\" could be a totally different entity to the alternative. Consider, in a new sentence, something like\r\n\r\nThe \"h3\" ALPN identifier indicates support for HTTP/3 over QUIC version 1. It SHOULD only be used in Alt-Svc when the alternative is known to support QUIC version 1.",
              "createdAt": "2022-01-15T02:45:32Z",
              "updatedAt": "2022-01-15T02:45:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y32M7",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-15T02:48:37Z",
          "updatedAt": "2022-01-15T02:48:38Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "The term request is a bit overloaded. Maybe it would be clearer to say something like\r\n\r\n \"The client choice of ALPN during the handshake doe not prevent a compatible version\"",
              "createdAt": "2022-01-15T02:48:37Z",
              "updatedAt": "2022-01-15T02:48:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4y4_Vh",
          "commit": {
            "abbreviatedOid": "43723de"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "The use of compatible upgrade means that you don't need h3q2.  I don't quite know how to rationalize that, but it's how it is.\r\n\r\nWorse, I'm afraid that this makes it very easy to get into an invalid combination of TLS extension values.\r\n\r\nThe problem is that adding another ALPN value here makes this very difficult to implement correctly.  If you look at how ALPN and transport parameters are implemented, if the two are independently processed (as they often are) then you can end up in very bad situations at a server if the two arrive with incompatible values (\"h3\" in one and \"v2\" in the other).\r\n\r\nI think that means I have to concede that ALPN doesn't identify a protocol stack in the strictest sense.  I think that it was Mike Bishop who said that h3 can use QUICv2 as long as QUICv2 provides the same transport capabilities that h3 depends on in QUICv1. That might be the way to thread this.\r\n\r\n(I don't know if we need some way to identify that part of QUICv1 that h3 depends on and separate that from the both the version-specific stuff in QUICv1 and QUICv2, while also keeping it distinct from QUIC as a protocol with invariants.  \"QUIC\" as a generic thing is tied to invariants that might not be suitable for use with HTTP; and QUICv1 is too specific.)",
          "createdAt": "2022-01-17T01:11:52Z",
          "updatedAt": "2022-01-17T01:11:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOFX7TQc4xEMhg",
      "title": "Retry test vector",
      "url": "https://github.com/quicwg/quic-v2/pull/33",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Part of the way to fixing #17.",
      "createdAt": "2022-01-15T00:07:12Z",
      "updatedAt": "2022-01-19T01:00:29Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "bb3fc8663ccc14b9b9ec840f40add73f5edeae74",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "retry-test-vector",
      "headRefOid": "8cc4a1c25426c4ac27742dc4d61d060bed6b6be3",
      "closedAt": "2022-01-15T01:48:26Z",
      "mergedAt": "2022-01-15T01:48:26Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "e239828e8432c50643ef24d298536db52b8df127"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 34,
      "id": "PR_kwDOFX7TQc4xO-EU",
      "title": "Test vector",
      "url": "https://github.com/quicwg/quic-v2/pull/34",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Partial fix for #17.\r\n\r\nAlso copied text for sections to come.",
      "createdAt": "2022-01-19T00:55:27Z",
      "updatedAt": "2022-01-19T01:00:28Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "e239828e8432c50643ef24d298536db52b8df127",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "test-vector",
      "headRefOid": "0e8bf2eb79f67122ab0cf0eb9bf7e97d33b66818",
      "closedAt": "2022-01-19T00:59:23Z",
      "mergedAt": "2022-01-19T00:59:23Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "43989c7e223e052bc8416a9fec873613d5c9bf13"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 36,
      "id": "PR_kwDOFX7TQc4xWhyh",
      "title": "Test vector",
      "url": "https://github.com/quicwg/quic-v2/pull/36",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes for #17.\r\n\r\nThe code that generated these was tested against the RFC 9001 version 1 test vectors.",
      "createdAt": "2022-01-20T22:47:52Z",
      "updatedAt": "2022-01-20T23:03:41Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "3298dacd7c9b8f834b96f77e7929872231c5fbcb",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "test-vector",
      "headRefOid": "ffc535f2cc676e26534c86ed0eb55d166562832e",
      "closedAt": "2022-01-20T23:03:41Z",
      "mergedAt": "2022-01-20T23:03:41Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "c07e91ecdb0c294c62e9442b09642627b50c7366"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 37,
      "id": "PR_kwDOFX7TQc4xWowi",
      "title": "Resumption",
      "url": "https://github.com/quicwg/quic-v2/pull/37",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #31",
      "createdAt": "2022-01-20T23:44:51Z",
      "updatedAt": "2022-01-22T00:09:23Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "8ab85319f34c8347191cc49586f05edddff10190",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "resumption",
      "headRefOid": "b373017e9f6186b43dd50a371ea2d6fa6bdfc287",
      "closedAt": "2022-01-22T00:09:23Z",
      "mergedAt": "2022-01-22T00:09:22Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "ef9b0575cdf6a4733bbff76d6db38411c83e4eea"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Incorporated all suggestions.\r\n\r\nMy only concern about server MUST is that it involves mucking with TLS implementations again to encode version in the ticket. Would this be a real obstacle]?",
          "createdAt": "2022-01-21T18:02:17Z",
          "updatedAt": "2022-01-21T18:02:17Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinduke for any implementation that uses BoringSSL (and I suspect the OpenSSL API is the same way), adding the version to the ticket will not require modifying the TLS implementation at all because the TLS implementation already accepts an opaque blob of data from QUIC (and that's currently used for transport parameters and h3 settings, adding the QUIC version would be transparent to TLS).",
          "createdAt": "2022-01-21T18:10:48Z",
          "updatedAt": "2022-01-21T18:10:48Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I am a bit concerned that we are departing from the common pattern used in QUIC specification: \"Clients MUST NOT do this particular vile thing; server MAY terminate the connection if they catch the client doing it.\" The purpose of the MUST NOT is to prevent the client from creating problems at the server. The purpose of the MAY is to encourage servers to do some enforcement, so bad client implementations have a good chance of being detected and do not become some entrenched practice. Telling the servers that they MUST enforce forces servers to dedicate resource to explicit detection, which may not be the right tradeoff for classes of servers, such as for example embedded servers with resource constraints.",
          "createdAt": "2022-01-21T18:12:17Z",
          "updatedAt": "2022-01-21T18:12:17Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema that is true, however TLS has a common pattern which is to require servers to validate their tickets thoroughly. I guess we have to pick which common pattern we care about most. I still think having the MUST on both clients and servers will lead to better interoperability",
          "createdAt": "2022-01-21T18:15:53Z",
          "updatedAt": "2022-01-21T18:15:53Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "@DavidSchinazi maybe. The way I deal with that in the picoquic demo server is simple: the default transport parameters are set when the process start, and by default the STEK key is also set at process start. I suppose that embedded servers could just follow that tradeoff, i.e., forget tickets issued before the last reboot in exchange for code simplicity. But the simple server only verifies that the version is \"one of the supported versions\", does not check the ticket for that. So this is extra code. Not a ton of extra code, so I am not going to fight that too long. But still extra code.",
          "createdAt": "2022-01-21T18:26:29Z",
          "updatedAt": "2022-01-21T18:26:29Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "I changed the MUST to a SHOULD. \"Servers gonna do\", so what we write here doesn't matter much, but I see no reason to create RFC violations where they're not really needed, and on the off chance that some servers have a serious obstacle to doing this.",
          "createdAt": "2022-01-22T00:09:12Z",
          "updatedAt": "2022-01-22T00:09:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4zMmcy",
          "commit": {
            "abbreviatedOid": "b860cbe"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-21T00:32:08Z",
          "updatedAt": "2022-01-21T00:32:20Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nServers SHOULD validate the originating version of any session ticket and reject\r\n```",
              "createdAt": "2022-01-21T00:32:08Z",
              "updatedAt": "2022-01-21T00:32:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zMnXk",
          "commit": {
            "abbreviatedOid": "b860cbe"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "I'm not 100% firm on the server \"MUST\", but I really think we should consider it.",
          "createdAt": "2022-01-21T00:39:54Z",
          "updatedAt": "2022-01-21T00:50:21Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nany ticket issued from a different version. This results in falling back to a\r\nfull TLS handshake, without 0-RTT.\r\n```",
              "createdAt": "2022-01-21T00:39:54Z",
              "updatedAt": "2022-01-21T00:50:21Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nAfter compatible version negotiation, any resulting session ticket\r\n```",
              "createdAt": "2022-01-21T00:40:27Z",
              "updatedAt": "2022-01-21T00:50:21Z"
            },
            {
              "originalPosition": 19,
              "body": "\ud83d\udc4d I considered suggesting that you make this more generic: \"Clients MUST only use a ticket for a QUIC version in which the ticket was received\", but you aren't speaking for QUIC versions other than v1 and v2 here, so this is right.",
              "createdAt": "2022-01-21T00:41:40Z",
              "updatedAt": "2022-01-21T00:50:22Z"
            },
            {
              "originalPosition": 21,
              "body": "Here's the hard part...\r\n\r\n```suggestion\r\nServers MUST validate the originating version of any session ticket and not resume from\r\n```\r\n\r\nThe easy bit: rejection isn't really the right term to use.  It's not resuming.\r\n\r\nSecond, this is where the rubber hits the road.  The general strategy in TLS is to allow clients to attempt ticket use anywhere, on the understand that tickets won't be accepted by anything but the correct server.\r\n\r\nInsisting on clients doing the right thing is fairly easy, so I'm OK with the \"MUST\" above, but if you are going to do this right, the \"MUST\" really belongs on the server side.\r\n\r\nAs for concerns @huitema raised about being able to implement this, I don't see how you can avoid having the machinery necessary to implement some sort of application/transport state if you are supporting arbitrary application protocols - or 0-RTT.  As soon as you do 0-RTT, you need some way to reclaim state.  And many application protocols need some way to carry state across resumptions.  HTTP does.  You might be able to avoid it with very careful rotation of STEKs and other such tricks, but carrying state really is the easiest way.",
              "createdAt": "2022-01-21T00:49:52Z",
              "updatedAt": "2022-01-21T00:50:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zMpQn",
          "commit": {
            "abbreviatedOid": "b860cbe"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-21T00:56:05Z",
          "updatedAt": "2022-01-21T00:56:05Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "MT convinced me, let's make this a MUST.",
              "createdAt": "2022-01-21T00:56:05Z",
              "updatedAt": "2022-01-21T00:56:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zQI9K",
          "commit": {
            "abbreviatedOid": "c8d90ff"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-21T17:59:30Z",
          "updatedAt": "2022-01-21T17:59:30Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Aye, there's a pending \"considerations for v1\" section in the VN draft where this could live, but I'm happy to have this here as well.",
              "createdAt": "2022-01-21T17:59:30Z",
              "updatedAt": "2022-01-21T17:59:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zQLmx",
          "commit": {
            "abbreviatedOid": "0f91cee"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-21T18:11:26Z",
          "updatedAt": "2022-01-21T18:11:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOFX7TQc4xWp6-",
      "title": "support v1 language",
      "url": "https://github.com/quicwg/quic-v2/pull/38",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #35.\r\n\r\nThe original intent was to recommend compatible VN. But that doesn't make any sense: compatible VN is something that the server initiates between versions that are at least partially supported. The client doesn't really have any control except that it can omit versions from the TP.\r\n\r\nIncompatible VN cannot happen between mutually supported versions, and the client is in control.",
      "createdAt": "2022-01-20T23:56:49Z",
      "updatedAt": "2022-01-22T00:01:23Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "c07e91ecdb0c294c62e9442b09642627b50c7366",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "encourage-compat",
      "headRefOid": "c6c7d9774718beb45e51e838d07d5ac5977e8401",
      "closedAt": "2022-01-22T00:01:22Z",
      "mergedAt": "2022-01-22T00:01:22Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "8ab85319f34c8347191cc49586f05edddff10190"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "@DavidSchinazi major rewrite that I think addresses your concerns. PTAL",
          "createdAt": "2022-01-21T17:57:04Z",
          "updatedAt": "2022-01-21T17:57:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4zMnBk",
          "commit": {
            "abbreviatedOid": "72180f0"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-21T00:36:56Z",
          "updatedAt": "2022-01-21T00:38:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I don't think saying anything about less common makes sense, we can't predict the future. This requirement comes from the fact that we kept the same Alt-Svc, so it makes sense to scope it to h3?",
              "createdAt": "2022-01-21T00:36:56Z",
              "updatedAt": "2022-01-21T00:38:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zQKgj",
          "commit": {
            "abbreviatedOid": "e0a80f7"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-21T18:06:27Z",
          "updatedAt": "2022-01-21T18:08:52Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "This paragraph is odd: servers won't drop support and maintain minimal initial parsing unless they're doing compatible VN. Perhaps:\r\n```suggestion\r\nIf a server supporting version 2 wishes to drop support for version 1, it SHOULD\r\nretain the ability to parse Initial packets from version 1 and support compatible\r\nnegotiation from version 1 to version 2; that will avoid the delay caused by\r\nincompatible version negotiation.\r\n```",
              "createdAt": "2022-01-21T18:06:28Z",
              "updatedAt": "2022-01-21T18:08:52Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nnegotiation or TCP fallback. For example, an origin advertising support for \"h3\" in Alt-Svc\r\nSHOULD support QUIC version 1 as it was the original QUIC version used by HTTP/3 and\r\ntherefore some clients will only support that version.\r\n```",
              "createdAt": "2022-01-21T18:08:41Z",
              "updatedAt": "2022-01-21T18:08:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zQNCi",
          "commit": {
            "abbreviatedOid": "e6d1aae"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-21T18:17:54Z",
          "updatedAt": "2022-01-21T18:17:55Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Yes, no one's going to \"drop\" v1 support. But someone could implement a server from scratch and only do v2. Similarly, the case where a v1 server decides to do the minimum to gracefully handle v2 seems really plausible to me.\r\n\r\nThere's plenty of text before that that says \"no really, don't delete your v1 code base\". The intent of this is to (1) raise partial support as a possibility, but (2) say that if you do, you SHOULD use compatible, not rely on incompatible.",
              "createdAt": "2022-01-21T18:17:54Z",
              "updatedAt": "2022-01-21T18:17:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zQk1A",
          "commit": {
            "abbreviatedOid": "e6d1aae"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-21T20:10:17Z",
          "updatedAt": "2022-01-21T20:10:17Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "But why would anyone do partial support but not compatible VN?",
              "createdAt": "2022-01-21T20:10:17Z",
              "updatedAt": "2022-01-21T20:10:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc4zRH6U",
          "commit": {
            "abbreviatedOid": "c6c7d97"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for the discussion!",
          "createdAt": "2022-01-21T23:59:36Z",
          "updatedAt": "2022-01-21T23:59:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOFX7TQc4xxIQ6",
      "title": "add optional field",
      "url": "https://github.com/quicwg/quic-v2/pull/41",
      "state": "CLOSED",
      "author": "william-zk",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "see #40 ",
      "createdAt": "2022-01-29T03:59:04Z",
      "updatedAt": "2022-04-26T22:40:41Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "ef9b0575cdf6a4733bbff76d6db38411c83e4eea",
      "headRepository": "william-zk/quic-v2",
      "headRefName": "dev_add_option_field",
      "headRefOid": "21f8c4e6c0488be8433f72021b91309b0e6f46e3",
      "closedAt": "2022-04-26T22:40:41Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "This proposal breaks the invariants AFAIU: https://datatracker.ietf.org/doc/html/rfc8999#section-5.1\r\n```\r\n   Long Header Packet {\r\n     Header Form (1) = 1,\r\n     Version-Specific Bits (7),\r\n     Version (32),\r\n     Destination Connection ID Length (8),\r\n     Destination Connection ID (0..2040),\r\n     Source Connection ID Length (8),\r\n     Source Connection ID (0..2040),\r\n     Version-Specific Data (..),\r\n   }\r\n```\r\nYou can't put anything between `Version` and `Destination Connection ID Length` without breaking version independent parsing.\r\n",
          "createdAt": "2022-03-16T16:45:53Z",
          "updatedAt": "2022-03-16T16:45:53Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "As @nibanks points out, this PR as written violates RFC8999.\r\n\r\nFurthermore, the clear consensus of the working group is that QUICv2 should not change the capabilities of QUICv1\r\n\r\nI think the idea of bringing Proxy Protocol into UDP/QUIC is an interesting one. However, I would recommend that anyone interested in this problem simply propose a UDP option (https://datatracker.ietf.org/doc/draft-ietf-tsvwg-udp-options/) to carry the original client IP. I would personally support a proposal along these lines, and would be willing to help write it, although I'm not going to drive it myself.",
          "createdAt": "2022-04-26T22:40:41Z",
          "updatedAt": "2022-04-26T22:40:41Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 43,
      "id": "PR_kwDOFX7TQc40Euk0",
      "title": "Force VN support for all v2 endpoints",
      "url": "https://github.com/quicwg/quic-v2/pull/43",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #42 ",
      "createdAt": "2022-03-07T23:16:00Z",
      "updatedAt": "2022-04-27T18:20:42Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "9288ef91148095f1f2585abaa8210187ef5f1cfa",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "mandatory-tp",
      "headRefOid": "b0710bd5a2f40cfc0284e6ed30a18cb42d129011",
      "closedAt": "2022-04-27T18:20:42Z",
      "mergedAt": "2022-04-27T18:20:42Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "b4cb741fc2385024b092a7fb408adaa4d774db9f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc443hJw",
          "commit": {
            "abbreviatedOid": "47f0519"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-26T22:38:09Z",
          "updatedAt": "2022-04-26T22:38:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "\"minimum requirements\" isn't well-defined in the VN draft. I'd suggest being more specific and requiring\r\n* send the TP\r\n* receive the TP\r\n* validate the received TP",
              "createdAt": "2022-04-26T22:38:10Z",
              "updatedAt": "2022-04-26T22:38:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc448ZT0",
          "commit": {
            "abbreviatedOid": "b0710bd"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-27T18:19:59Z",
          "updatedAt": "2022-04-27T18:19:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOFX7TQc421S-Z",
      "title": "specifically mention ALPNs",
      "url": "https://github.com/quicwg/quic-v2/pull/45",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #44 ",
      "createdAt": "2022-04-26T22:35:47Z",
      "updatedAt": "2022-04-26T22:46:45Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "ef9b0575cdf6a4733bbff76d6db38411c83e4eea",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "doq",
      "headRefOid": "793a7077a0b6159ea138a1a9e5299a304631f663",
      "closedAt": "2022-04-26T22:46:45Z",
      "mergedAt": "2022-04-26T22:46:45Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "9288ef91148095f1f2585abaa8210187ef5f1cfa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc443hWU",
          "commit": {
            "abbreviatedOid": "2854fa8"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-26T22:39:35Z",
          "updatedAt": "2022-04-26T22:40:11Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "You have two CLs in flight with this no-op change. In the future I'd suggest just fixing that directly on main to simplify reviews",
              "createdAt": "2022-04-26T22:39:35Z",
              "updatedAt": "2022-04-26T22:40:11Z"
            },
            {
              "originalPosition": 19,
              "body": "Add informative reference to DoQ draft",
              "createdAt": "2022-04-26T22:40:03Z",
              "updatedAt": "2022-04-26T22:40:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOFX7TQc421d3t",
      "title": "ban cross-version NEW_TOKEN",
      "url": "https://github.com/quicwg/quic-v2/pull/46",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #39 ",
      "createdAt": "2022-04-26T23:36:04Z",
      "updatedAt": "2022-04-28T18:22:22Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "b4cb741fc2385024b092a7fb408adaa4d774db9f",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "new-token",
      "headRefOid": "805f3a58e9166a4cd79a8543d3ddcab7d90f78c9",
      "closedAt": "2022-04-28T18:22:21Z",
      "mergedAt": "2022-04-28T18:22:21Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "d3980015e70dba0d78d95235518077707baf28dc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc443ySQ",
          "commit": {
            "abbreviatedOid": "93ecad5"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-26T23:36:50Z",
          "updatedAt": "2022-04-26T23:41:27Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n# TLS Resumption and NEW_TOKEN Tokens\r\n```",
              "createdAt": "2022-04-26T23:36:50Z",
              "updatedAt": "2022-04-26T23:41:27Z"
            },
            {
              "originalPosition": 12,
              "body": "I think that I might prefer a different polarity on the SHOULD and MUST clauses in this section.  That is, servers MUST NOT and clients SHOULD.  The point here being that a malicious client will produce a ticket from the wrong version and the server is ultimately responsible for ensuring that it doesn't result in badness.",
              "createdAt": "2022-04-26T23:37:34Z",
              "updatedAt": "2022-04-26T23:41:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 47,
      "id": "PR_kwDOFX7TQc43pEdD",
      "title": "octets -> bytes",
      "url": "https://github.com/quicwg/quic-v2/pull/47",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Invariants uses `bytes`, let's be consistent",
      "createdAt": "2022-05-11T11:10:02Z",
      "updatedAt": "2022-05-12T19:31:50Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d3980015e70dba0d78d95235518077707baf28dc",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "this-bytes",
      "headRefOid": "1d5202c6c132ca38b4622186b4128251c652d3ef",
      "closedAt": "2022-05-12T19:31:50Z",
      "mergedAt": "2022-05-12T19:31:50Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "27ac42860db283c1105805de9fbd65c49eed2cc9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc45w-TS",
          "commit": {
            "abbreviatedOid": "61a6fd5"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-11T11:10:54Z",
          "updatedAt": "2022-05-11T11:10:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nthat occupies the second through fifth bytes of every long header (see\r\n```",
              "createdAt": "2022-05-11T11:10:55Z",
              "updatedAt": "2022-05-11T11:10:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOFX7TQc43vOYH",
      "title": "Lucas's comments",
      "url": "https://github.com/quicwg/quic-v2/pull/55",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #48, #49, #50, #51, #52, #53, #54.",
      "createdAt": "2022-05-12T18:05:38Z",
      "updatedAt": "2022-05-12T19:34:58Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "27ac42860db283c1105805de9fbd65c49eed2cc9",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "lucas",
      "headRefOid": "2781e2586b471f5f3834300a49557f99c383c935",
      "closedAt": "2022-05-12T19:34:58Z",
      "mergedAt": "2022-05-12T19:34:57Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "d927e94d769c803d0c3229e9e21046bb33cc339e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc455YsE",
          "commit": {
            "abbreviatedOid": "eb8dcff"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Couple of nits but otherwise LGTM",
          "createdAt": "2022-05-12T19:17:15Z",
          "updatedAt": "2022-05-12T19:19:45Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nossify on the version 1 key derivation and packet formats.\r\n```",
              "createdAt": "2022-05-12T19:17:15Z",
              "updatedAt": "2022-05-12T19:19:45Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nThe Version field of long headers is 0x709a50c4.\r\n```",
              "createdAt": "2022-05-12T19:17:54Z",
              "updatedAt": "2022-05-12T19:19:45Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nAll version 2 long header packet types are different. The Type field values are:\r\n```",
              "createdAt": "2022-05-12T19:19:08Z",
              "updatedAt": "2022-05-12T19:19:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOFX7TQc43663l",
      "title": "A v2-only ticket constitutes a promise",
      "url": "https://github.com/quicwg/quic-v2/pull/56",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Though no guarantee can be made, a client with a v2 ticket (which cannot\r\nbe used with v1) might be in a good position to attempt v2 outright.\r\nAvoiding saying this creates something of a weird contradiction between\r\nsections.",
      "createdAt": "2022-05-17T01:29:14Z",
      "updatedAt": "2022-05-20T19:29:57Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d927e94d769c803d0c3229e9e21046bb33cc339e",
      "headRepository": "martinthomson/quic-v2",
      "headRefName": "a-ticket-is-a-promise",
      "headRefOid": "0855782c0a0e5af42a396e77126e1a46fd98e7d8",
      "closedAt": "2022-05-20T19:29:57Z",
      "mergedAt": "2022-05-20T19:29:56Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "b9a315324a0cc45bb73a288b5a4a482e0c0d28e9"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Hmm. Your changes draws attention to the server expressing intent with a session ticket (but maybe not actual support), but that now seems oddly contrasting against the prior sentence that the client acts on reasonable confidence of support.\r\n\r\nSo is the session ticket intent something a client can have reasonable confidence in, or not?",
          "createdAt": "2022-05-19T00:10:23Z",
          "updatedAt": "2022-05-19T00:10:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "I thought that this was an appropriate amount of hedging on that point.  The previous sentence is the \"without other information, probably choose v1\" side, the added sentence is the \"maybe if you get a ticket you could bet the other way\".  Nothing firm either way, as tickets don't represent a commitment, they only signal intent in a way that alters probabilities.",
          "createdAt": "2022-05-19T00:13:03Z",
          "updatedAt": "2022-05-19T00:13:03Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Got it. On balance that seems right, we can't proscribe too much behaviour here. Looking forward to the research papers that analyse the effects of choice in the wild during 2023+",
          "createdAt": "2022-05-19T00:18:39Z",
          "updatedAt": "2022-05-19T00:19:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 57,
      "id": "PR_kwDOFX7TQc4366_l",
      "title": "Yeah, it's crypto, but this is more correct",
      "url": "https://github.com/quicwg/quic-v2/pull/57",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Not only because crypto is short for cryptocurrency.",
      "createdAt": "2022-05-17T01:30:18Z",
      "updatedAt": "2022-05-20T19:31:15Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d927e94d769c803d0c3229e9e21046bb33cc339e",
      "headRepository": "martinthomson/quic-v2",
      "headRefName": "crypto-is-key",
      "headRefOid": "d0dcf315ea0f79abf8e71082aa0ea5aa1a911ef7",
      "closedAt": "2022-05-20T19:31:15Z",
      "mergedAt": "2022-05-20T19:31:15Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "944896dc0aa27a2c3ed893f0545c2d9b108202c1"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "QUICv3, the web3 protocol, uses crypto the right way: the blockchain way.",
          "createdAt": "2022-05-19T00:10:00Z",
          "updatedAt": "2022-05-19T00:10:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc46R5Zm",
          "commit": {
            "abbreviatedOid": "d0dcf31"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "You're only allowed to call it crypto in QUIC v3",
          "createdAt": "2022-05-19T00:05:25Z",
          "updatedAt": "2022-05-19T00:05:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOFX7TQc4367dL",
      "title": "Extensions might create incompatibilities",
      "url": "https://github.com/quicwg/quic-v2/pull/58",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Though this would likely be monstrously inadvisable, I am fairly\r\nconfident that I could construct an interoperable (or at least\r\ndeployable) extension to QUIC that works in QUICv1 but not QUICv2 or\r\nvice versa.  It's OK to establish expectations, but some softening of\r\nthe statement might help.",
      "createdAt": "2022-05-17T01:33:51Z",
      "updatedAt": "2022-05-20T19:32:21Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d927e94d769c803d0c3229e9e21046bb33cc339e",
      "headRepository": "martinthomson/quic-v2",
      "headRefName": "this-seems-like-it-invites-fate",
      "headRefOid": "09d9eb142b7bc360f30d848b8f86a79e601bd445",
      "closedAt": "2022-05-20T19:32:21Z",
      "mergedAt": "2022-05-20T19:32:21Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "89863e1f580851ea79b9dbe9639bf62ee3d69b1a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc46R5QR",
          "commit": {
            "abbreviatedOid": "09d9eb1"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "This seems very accurate ",
          "createdAt": "2022-05-19T00:04:13Z",
          "updatedAt": "2022-05-19T00:04:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc46cp_m",
          "commit": {
            "abbreviatedOid": "09d9eb1"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-20T19:32:17Z",
          "updatedAt": "2022-05-20T19:32:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOFX7TQc43-xX3",
      "title": "Editorial fixes",
      "url": "https://github.com/quicwg/quic-v2/pull/60",
      "state": "MERGED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T19:38:18Z",
      "updatedAt": "2022-05-20T19:47:17Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d927e94d769c803d0c3229e9e21046bb33cc339e",
      "headRepository": "DavidSchinazi/quic-v2",
      "headRefName": "dschinazi_editorial",
      "headRefOid": "7e4ad0bf8b794d3c19b24eeee9738f8e0e93e49d",
      "closedAt": "2022-05-20T19:47:17Z",
      "mergedAt": "2022-05-20T19:47:17Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "88021529de2e86ccec7c109e50c2f3fd43266671"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc46R5Ja",
          "commit": {
            "abbreviatedOid": "7e4ad0b"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Nominate David for RFC WG",
          "createdAt": "2022-05-19T00:03:21Z",
          "updatedAt": "2022-05-19T00:03:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc46cuHm",
          "commit": {
            "abbreviatedOid": "7e4ad0b"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-20T19:47:06Z",
          "updatedAt": "2022-05-20T19:47:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOFX7TQc43-yfr",
      "title": "Initial version can be misinterpreted",
      "url": "https://github.com/quicwg/quic-v2/pull/61",
      "state": "MERGED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The correct term from the VN document would be \"original version\" but just removing the word initial avoids the confusion",
      "createdAt": "2022-05-17T19:43:25Z",
      "updatedAt": "2022-05-20T19:50:03Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d927e94d769c803d0c3229e9e21046bb33cc339e",
      "headRepository": "DavidSchinazi/quic-v2",
      "headRefName": "original_version",
      "headRefOid": "43bd2096c3c35cda63b5097c177992463f519458",
      "closedAt": "2022-05-20T19:50:03Z",
      "mergedAt": "2022-05-20T19:50:03Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "dd4cba8e2b6071f18b54ba835af725432a10d63f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc46R5Bg",
          "commit": {
            "abbreviatedOid": "43bd209"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Fewer words means fewer nits",
          "createdAt": "2022-05-19T00:02:20Z",
          "updatedAt": "2022-05-19T00:02:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc46cvB1",
          "commit": {
            "abbreviatedOid": "43bd209"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-20T19:49:55Z",
          "updatedAt": "2022-05-20T19:49:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOFX7TQc43-z9F",
      "title": "Servers are endpoints too",
      "url": "https://github.com/quicwg/quic-v2/pull/63",
      "state": "MERGED",
      "author": "DavidSchinazi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T19:49:54Z",
      "updatedAt": "2022-05-20T19:56:37Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d927e94d769c803d0c3229e9e21046bb33cc339e",
      "headRepository": "DavidSchinazi/quic-v2",
      "headRefName": "servers",
      "headRefOid": "056ee787f139bf73e50ac827d88d1d9ee12d8ce5",
      "closedAt": "2022-05-20T19:56:37Z",
      "mergedAt": "2022-05-20T19:56:37Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "b6f23fe0840f58f2549035728bca2d7e75559a00"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc46R4vO",
          "commit": {
            "abbreviatedOid": "056ee78"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Agree",
          "createdAt": "2022-05-19T00:01:07Z",
          "updatedAt": "2022-05-19T00:01:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc46cwY9",
          "commit": {
            "abbreviatedOid": "056ee78"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-20T19:56:31Z",
          "updatedAt": "2022-05-20T19:56:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOFX7TQc44Np_N",
      "title": "David's WGLC comments",
      "url": "https://github.com/quicwg/quic-v2/pull/68",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #59, #62, #65, #66",
      "createdAt": "2022-05-20T20:25:37Z",
      "updatedAt": "2022-05-20T23:00:21Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "b960e2184b2dfc37fc3bc29d014800e6a54de6b3",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "schinazi",
      "headRefOid": "6f41b661675076849896af7cf6b2a645e9be9309",
      "closedAt": "2022-05-20T23:00:21Z",
      "mergedAt": "2022-05-20T23:00:21Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "6730b8f9db4d01237a6b3910c60de51aac61c1d7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc46dDZO",
          "commit": {
            "abbreviatedOid": "489d6ff"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2022-05-20T21:49:24Z",
          "updatedAt": "2022-05-20T21:50:06Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nThis version number will not change in subsequent versions of this draft,\r\n```",
              "createdAt": "2022-05-20T21:49:24Z",
              "updatedAt": "2022-05-20T21:50:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOFX7TQc44OV3l",
      "title": "retry is validated",
      "url": "https://github.com/quicwg/quic-v2/pull/69",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix #64. @DavidSchinazi verbally approved.",
      "createdAt": "2022-05-20T23:15:45Z",
      "updatedAt": "2022-05-20T23:19:09Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "6730b8f9db4d01237a6b3910c60de51aac61c1d7",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "retry-valid",
      "headRefOid": "dc89b6abd1ad717a4ac696f075dcde3a7e7d94cd",
      "closedAt": "2022-05-20T23:19:09Z",
      "mergedAt": "2022-05-20T23:19:09Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "7829aa87b0111335edcc17e5a853c72b221f504d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 70,
      "id": "PR_kwDOFX7TQc47NILO",
      "title": "add writeup",
      "url": "https://github.com/quicwg/quic-v2/pull/70",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T16:11:57Z",
      "updatedAt": "2022-07-11T16:14:07Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "9cafdc045df3b9623af18c1a46345ed4d0271247",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "shepherd-writeup",
      "headRefOid": "2fb180cab074569c026e1d6a7ab3e353b44ec04c",
      "closedAt": "2022-07-11T16:14:07Z",
      "mergedAt": "2022-07-11T16:14:07Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "a1b1275c9807acb773c6b57423b5565e76087180"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 71,
      "id": "PR_kwDOFX7TQc47NKLq",
      "title": "tweak references to match house style",
      "url": "https://github.com/quicwg/quic-v2/pull/71",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T16:20:18Z",
      "updatedAt": "2022-07-11T16:22:30Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "a1b1275c9807acb773c6b57423b5565e76087180",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "ref-styles",
      "headRefOid": "0cd7430d3d86da7e85d1c9447a832afdea44bd28",
      "closedAt": "2022-07-11T16:22:30Z",
      "mergedAt": "2022-07-11T16:22:29Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "3d2af981f8ed63b6256aadb2fec122a2df469fc6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 74,
      "id": "PR_kwDOFX7TQc49429s",
      "title": "AD nits",
      "url": "https://github.com/quicwg/quic-v2/pull/74",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #72 ",
      "createdAt": "2022-08-26T19:45:29Z",
      "updatedAt": "2022-08-26T19:46:44Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "3d2af981f8ed63b6256aadb2fec122a2df469fc6",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "nits",
      "headRefOid": "4fbce00cabd9d4b213cd09a0760769d75beab51e",
      "closedAt": "2022-08-26T19:46:44Z",
      "mergedAt": "2022-08-26T19:46:44Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "770e58c89b49c6946e4af96a2264546e2e0b3a5d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 75,
      "id": "PR_kwDOFX7TQc5Ag5Sx",
      "title": "SECDIR review response",
      "url": "https://github.com/quicwg/quic-v2/pull/75",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-10T18:15:50Z",
      "updatedAt": "2022-10-11T04:11:46Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "3e690dc047a64deaafbde80cc636989096617c33",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "secdir-review",
      "headRefOid": "ecc5c7df4b4bef5f06fc3a14363d1a462fa5f0b6",
      "closedAt": "2022-10-11T04:11:46Z",
      "mergedAt": "2022-10-11T04:11:46Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "a91e1296b61c978c107a4a7ff4ca58d98eb3a93d"
      },
      "comments": [
        {
          "author": "squarooticus",
          "authorAssociation": "NONE",
          "body": "LGTM! \ud83d\udc3f",
          "createdAt": "2022-10-11T01:40:53Z",
          "updatedAt": "2022-10-11T01:40:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc5DvaAb",
          "commit": {
            "abbreviatedOid": "d501bd4"
          },
          "author": "squarooticus",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-10T20:28:36Z",
          "updatedAt": "2022-10-10T20:28:37Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "https://www.youtube.com/watch?v=3m6Blqs0IgY",
              "createdAt": "2022-10-10T20:28:37Z",
              "updatedAt": "2022-10-10T20:28:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDOFX7TQc5AnJVe",
      "title": "Tp violation",
      "url": "https://github.com/quicwg/quic-v2/pull/77",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #76.\r\n\r\nI'm making a guess that the VN draft will say a certain thing about v1 packets with unsupported Chosen Version. If my guess is wrong, this will have to change.",
      "createdAt": "2022-10-12T01:37:43Z",
      "updatedAt": "2022-10-13T21:58:35Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "a91e1296b61c978c107a4a7ff4ca58d98eb3a93d",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "tp-violation",
      "headRefOid": "0d8e657929bb721c75d5738ac240c5800a426213",
      "closedAt": "2022-10-13T21:58:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Overcome by events (see #76)",
          "createdAt": "2022-10-13T21:58:35Z",
          "updatedAt": "2022-10-13T21:58:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 79,
      "id": "PR_kwDOFX7TQc5Axj-W",
      "title": "Clarify when the client learns the negotiated version",
      "url": "https://github.com/quicwg/quic-v2/pull/79",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #78, pending the discussion on the list.",
      "createdAt": "2022-10-13T23:12:29Z",
      "updatedAt": "2022-10-20T16:52:59Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "8dfea712ab16a4a3d9927608ae0b29c366738169",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "learn-version",
      "headRefOid": "ce2283068e636fb1b80bd00e5eda2fa9f222de8e",
      "closedAt": "2022-10-20T16:52:59Z",
      "mergedAt": "2022-10-20T16:52:59Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "d8842ebe8cbed9ed3df2a40f8f44feaf2e59d0e1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc5EDLR_",
          "commit": {
            "abbreviatedOid": "9cde049"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Overall this looks good, though I would also non-normatively restate the requirement from QUIC VN to validate that the negotiated version from the TP matches the one from the long header, to make sure implementers don't forget",
          "createdAt": "2022-10-14T01:11:27Z",
          "updatedAt": "2022-10-14T01:11:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc5EHK5j",
          "commit": {
            "abbreviatedOid": "3b8ae36"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T16:59:01Z",
          "updatedAt": "2022-10-14T17:04:35Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "The juxtaposition of these two clauses (\"As the server...\" vs \" it MUST send\") is weird because the second does not derive from the first - the second is a consequence of how the client learns. I would make them separate sentences",
              "createdAt": "2022-10-14T16:59:01Z",
              "updatedAt": "2022-10-14T17:04:35Z"
            },
            {
              "originalPosition": 9,
              "body": "No need to specify initial, since all CRYPTO frames need to be in the negotiated version",
              "createdAt": "2022-10-14T16:59:22Z",
              "updatedAt": "2022-10-14T17:04:35Z"
            },
            {
              "originalPosition": 10,
              "body": "In practice, the client will learn before that because it needs to install initial keys in the negotiated version before it can access the CRYPTO frame. I'd suggest something like `The client learns the negotiated version by observing the first long header Version field that differs from the original version. If the client receives a CRYPTO frame from the server in the original version, that indicates that the negotiated version is equal to the original version.`",
              "createdAt": "2022-10-14T17:00:46Z",
              "updatedAt": "2022-10-14T17:04:35Z"
            },
            {
              "originalPosition": 11,
              "body": "This describes a protocol violation, so it should close the connection. Though I wouldn't bother checking packet numbers here, it's overhead with limited benefit",
              "createdAt": "2022-10-14T17:01:47Z",
              "updatedAt": "2022-10-14T17:04:35Z"
            },
            {
              "originalPosition": 23,
              "body": "Since we're opening the 2119 box, should we also change this? This adds a requirement for the server to install negotiated version initial keys even though they're not useful in practice",
              "createdAt": "2022-10-14T17:04:30Z",
              "updatedAt": "2022-10-14T17:04:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EHP4W",
          "commit": {
            "abbreviatedOid": "3b8ae36"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:17:21Z",
          "updatedAt": "2022-10-14T17:17:21Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Making it a protocol violation would allow late-arriving Initial garbage from an attacker to taking down a connection. I've considerably rewritten this now, PTAL.\r\n\r\nI've left the door open for a client to accept an OOO v1 ACK, for instance.",
              "createdAt": "2022-10-14T17:17:21Z",
              "updatedAt": "2022-10-14T17:17:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EHQNd",
          "commit": {
            "abbreviatedOid": "3b8ae36"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:18:35Z",
          "updatedAt": "2022-10-14T17:18:36Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I am concerned that the obvious path here is for the client to send INITIAL ACK with the negotiated version. I'll check with implementers, but I really don't want to break existing implementations.",
              "createdAt": "2022-10-14T17:18:36Z",
              "updatedAt": "2022-10-14T17:18:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EHQbo",
          "commit": {
            "abbreviatedOid": "3b8ae36"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:19:27Z",
          "updatedAt": "2022-10-14T17:19:27Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "The server only has to worry about 2 versions, while the client has to worry about everything in the Supported Versions field.",
              "createdAt": "2022-10-14T17:19:27Z",
              "updatedAt": "2022-10-14T17:19:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EHkul",
          "commit": {
            "abbreviatedOid": "679773c"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T18:32:41Z",
          "updatedAt": "2022-10-14T18:36:19Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This \"Therefore\" has the same problem I was describing with the \"As\" in the earlier text - the second sentence here doesn't derive from the first.\r\n```suggestion\r\ntransport parameters. The server MUST send all CRYPTO frames using\r\n```",
              "createdAt": "2022-10-14T18:32:41Z",
              "updatedAt": "2022-10-14T18:36:19Z"
            },
            {
              "originalPosition": 25,
              "body": "This packet number checking doesn't make sense because we don't require the server to send all initials with the negotiated version. I'd remove this entire paragraph.",
              "createdAt": "2022-10-14T18:35:57Z",
              "updatedAt": "2022-10-14T18:36:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EH21N",
          "commit": {
            "abbreviatedOid": "ce22830"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Works for me. Crypto frames sing new VN makes sense.",
          "createdAt": "2022-10-14T19:43:40Z",
          "updatedAt": "2022-10-14T19:43:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc5EINUQ",
          "commit": {
            "abbreviatedOid": "ce22830"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T20:55:50Z",
          "updatedAt": "2022-10-14T20:55:50Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I haven't implemented this myself, but it would be much easier to implement in Google's implementation if the server never had to keep multiple sets of keys per encryption level. ",
              "createdAt": "2022-10-14T20:55:50Z",
              "updatedAt": "2022-10-14T20:55:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EITlE",
          "commit": {
            "abbreviatedOid": "3b8ae36"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T21:14:22Z",
          "updatedAt": "2022-10-14T21:14:24Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Client implementations are currently sending INITIAL acks with the negotiated version, so this would require code changes and possibly rolling a new version number.",
              "createdAt": "2022-10-14T21:14:22Z",
              "updatedAt": "2022-10-14T21:14:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EKTPE",
          "commit": {
            "abbreviatedOid": "ce22830"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I'm broadly OK with the shape of this change.\r\n\r\nDavid's suggestion might have made sense earlier in the process, but I don't think that it works now.  I'm not sure that it worked ever, but I'm less inclined to get precious about that sort of thing than I used to.",
          "createdAt": "2022-10-17T06:16:41Z",
          "updatedAt": "2022-10-17T06:19:01Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Though this is likely to be an unusual case, Initial packets might need to be sent by the client if the server Initial is very large (think PQ key exchange).  If the server has chosen a different version, the client can choose to send them in the original or negotiated version.  Or at least as far as the specification is currently written.\r\n\r\nThe server probably has to keep the keys for the original version, so David is justified in asking whether we should just stick to that version for Initial packets.  Having the server install new keys for the negotiated version is fairly trivial, but it's not strictly needed.  Encouraging the clean break on the client end means that the server needs to install a second set of keys.\r\n\r\nForcing the client to stick with the original version would be a change for me.  The implementation I wrote has the client switch over to using the negotiated version as described here; the server adds a second set of keys for Initial packets so that it can continue to process both old and new packets.  On the client side keys for all compatible versions are installed from the beginning.  A change here will result in removing some code, though see below.\r\n\r\nI don't know how easy it would be to deploy, however.  There are deployed clients that do the switchover and servers that handle it.  A server that was written to this proposed design would not work with those existing clients.\r\n\r\nThis is only a programming convenience for server implementations, as they are already in the position where - even if they only support one version - they need to generate Initial keys on the fly as packets arrive.  The only real wrinkle here is associating more than one key with connection state.  For servers that share code with clients though, a client implementation needs to support multiple receive keys when it enables compatible version negotiation.\r\n\r\nSo I'm not seeing a lot to be gained.  Servers probably need to accept Initials with both keys for the foreseeable future due to the deployed base.  Savings, such as they are, are a tiny amount of computation and some engineering work that a lot of code has to take on anyway.\r\n\r\nSeparately, this creates a special case that seems potentially awkward for generic code.  The client would have to send v1 packets on a connection that it knows is v2.  For v1 and v2, this doesn't make any real difference, but that's not something we can guarantee for any arbitrary pair of versions (yes, I know that this is the v2 spec).  Mapping out compatibility for the first flight is one thing, but that doesn't necessarily extend to other stuff that might be sent in Initial packets (CONNECTION_CLOSE for instance).  Building a clean switchover has a chance of applying to many QUIC versions, but this special case might not.  I'd like to avoid having to think about how to accommodate that in the design.\r\n\r\nFor me, the special case thing is not that important.  Initial packets aren't useful for much, so I could maybe tolerate code that only ever works for QUIC v1 and v2 in a pinch.  The deployment thing seems far more of a problem though.  Relative to what a server gains for the change, I'd lean heavily toward not changing the rules.",
              "createdAt": "2022-10-17T06:16:41Z",
              "updatedAt": "2022-10-17T06:19:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EOyRK",
          "commit": {
            "abbreviatedOid": "3b8ae36"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-17T19:51:44Z",
          "updatedAt": "2022-10-17T19:51:44Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "That's fair. I agree that it's quite late in the process so I won't push this further.",
              "createdAt": "2022-10-17T19:51:44Z",
              "updatedAt": "2022-10-17T19:51:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5EOyxe",
          "commit": {
            "abbreviatedOid": "ce22830"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM but please wait until we've agreed on what to do in the VN draft before merging",
          "createdAt": "2022-10-17T19:53:38Z",
          "updatedAt": "2022-10-17T19:53:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOFX7TQc5EUu8l",
          "commit": {
            "abbreviatedOid": "3b8ae36"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T17:56:37Z",
          "updatedAt": "2022-10-18T17:56:38Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "OK, I think we've converged on forcing the server to accept v1 Initial throughout",
              "createdAt": "2022-10-18T17:56:38Z",
              "updatedAt": "2022-10-18T17:56:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOFX7TQc5Bbx_E",
      "title": "Rob Wilton's IESG review",
      "url": "https://github.com/quicwg/quic-v2/pull/80",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T17:54:35Z",
      "updatedAt": "2022-10-26T17:50:39Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d8842ebe8cbed9ed3df2a40f8f44feaf2e59d0e1",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "wilton",
      "headRefOid": "5e9b4f8df37dfebed9469acad3eb4d4b12c44016",
      "closedAt": "2022-10-26T17:50:38Z",
      "mergedAt": "2022-10-26T17:50:38Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "0ed75b8827aa15ff011002115e8ba15ce23ee0f4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 81,
      "id": "PR_kwDOFX7TQc5BcA-e",
      "title": "Roman Danyliw review",
      "url": "https://github.com/quicwg/quic-v2/pull/81",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T18:51:05Z",
      "updatedAt": "2022-10-26T17:50:29Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "d8842ebe8cbed9ed3df2a40f8f44feaf2e59d0e1",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "danyliw",
      "headRefOid": "a2ad61238e6cad6d05c1dc8c596057918f39eed7",
      "closedAt": "2022-10-26T17:50:29Z",
      "mergedAt": "2022-10-26T17:50:29Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "bce89321075bf74d6a06bd5f4fbf5c861c758a5e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 82,
      "id": "PR_kwDOFX7TQc5BhJRo",
      "title": "Eric V IESG review",
      "url": "https://github.com/quicwg/quic-v2/pull/82",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-25T17:11:03Z",
      "updatedAt": "2022-10-26T17:50:18Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "701d169f2d2a024b4546ae12fcd6c0eeefeabd14",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "vyncke",
      "headRefOid": "8bd65604e87078bdcb414b925db89a5781c78985",
      "closedAt": "2022-10-26T17:50:17Z",
      "mergedAt": "2022-10-26T17:50:17Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "c1a89c3dd893d0d1297fe1b8079e89ae4574fac8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 83,
      "id": "PR_kwDOFX7TQc5Br1q6",
      "title": "Warren's comments",
      "url": "https://github.com/quicwg/quic-v2/pull/83",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-27T17:12:04Z",
      "updatedAt": "2022-10-27T19:24:10Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "7ed0b7f04600440be5b7d7b591faa277501ec96c",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "kumari",
      "headRefOid": "73f749284fe84d9cf6aaa29ec4f50fea37bc0721",
      "closedAt": "2022-10-27T19:24:10Z",
      "mergedAt": "2022-10-27T19:24:10Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "6e9ef3987ee40ac66c6274cf6a8d6aecd09cf5d2"
      },
      "comments": [
        {
          "author": "wkumari",
          "authorAssociation": "NONE",
          "body": "WFM, and thank you!",
          "createdAt": "2022-10-27T19:14:26Z",
          "updatedAt": "2022-10-27T19:14:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 84,
      "id": "PR_kwDOFX7TQc5ByVv2",
      "title": "delete bit about storing failures separately",
      "url": "https://github.com/quicwg/quic-v2/pull/84",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-28T23:23:14Z",
      "updatedAt": "2022-11-06T14:00:29Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "6e9ef3987ee40ac66c6274cf6a8d6aecd09cf5d2",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "schinazi",
      "headRefOid": "0f07e165d650721d089fe5ef9ebaad24943ce106",
      "closedAt": "2022-11-06T14:00:29Z",
      "mergedAt": "2022-11-06T14:00:29Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "cf1c467bc67f0a6e3c13f5e1eada7217482cbf1a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "PR_kwDOFX7TQc5FCRqH",
      "title": "New random numbers",
      "url": "https://github.com/quicwg/quic-v2/pull/85",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As requested, all new version number, salts, etc. for QUICv2.\r\n\r\nVerification of the test vectors would be especially valuable.",
      "createdAt": "2022-12-10T22:53:19Z",
      "updatedAt": "2022-12-12T18:58:06Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "cf1c467bc67f0a6e3c13f5e1eada7217482cbf1a",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "new-numbers",
      "headRefOid": "dd38930a3da772b28b1b13c48064e13eaf80091c",
      "closedAt": "2022-12-12T18:58:06Z",
      "mergedAt": "2022-12-12T18:58:06Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "3fcd58357825eb1396f12167b2e4aeab61db3814"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Woof. Thank you very much for quickly checking, and sorry I botched every part of that.\r\n\r\nAll fixed now, I hope.",
          "createdAt": "2022-12-12T01:56:56Z",
          "updatedAt": "2022-12-12T01:56:56Z"
        },
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "The new test vectors works well with my QUIC implementation in Haskell.",
          "createdAt": "2022-12-12T06:23:05Z",
          "updatedAt": "2022-12-12T06:23:05Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "> The new test vectors works well with my QUIC implementation in Haskell.\r\n\r\nThanks Kazu!",
          "createdAt": "2022-12-12T18:58:01Z",
          "updatedAt": "2022-12-12T18:58:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc5ISXud",
          "commit": {
            "abbreviatedOid": "4854954"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "A few troubles reproducing what you have there.  I'll stop at the invocations of SHA-256.",
          "createdAt": "2022-12-11T23:36:08Z",
          "updatedAt": "2022-12-11T23:41:13Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Took me a while to work this out:\r\n\r\n```\r\n$ echo -n \"QUICv2 version number.\" | sha256sum\r\n43027d66a59ea521a5f2e5281505c0ae10ad363cded1053de316415f18b1b2e0  -\r\n~\r\n$ echo -n \"QUICv2 version number\" | sha256sum\r\n6b3343cfc25b51101996471c75a1de7b3d4da11ad87f165d3968261e230b96ff  -\r\n~\r\n$ echo  \"QUICv2 version number\" | sha256sum\r\n5a8e301ab1a95e157c6f303e47b89e9f762db8e44e342628b5f309a5b943d5ae  -\r\n```\r\n\r\nYou might want to look into that.",
              "createdAt": "2022-12-11T23:36:08Z",
              "updatedAt": "2022-12-11T23:41:14Z"
            },
            {
              "originalPosition": 19,
              "body": "Same as above.  Note that this assumes that echo is producing '\\n' and not '\\r\\n' or any of the alternatives, so you might want to use `echo -n` instead.  Also, the period inside the quotes is definitely misleading.",
              "createdAt": "2022-12-11T23:38:01Z",
              "updatedAt": "2022-12-11T23:41:14Z"
            },
            {
              "originalPosition": 36,
              "body": "This is worse again than the previous ones, aside from the moved period.  I had to knock the capitals off to get the value you have.",
              "createdAt": "2022-12-11T23:40:07Z",
              "updatedAt": "2022-12-11T23:41:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5ISxcl",
          "commit": {
            "abbreviatedOid": "dd38930"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "WFM.  Not validated with a real build, but a script.  See https://github.com/quicwg/base-drafts/pull/4997 for the script that I used.",
          "createdAt": "2022-12-12T04:21:24Z",
          "updatedAt": "2022-12-12T04:44:41Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Checks out now.",
              "createdAt": "2022-12-12T04:21:24Z",
              "updatedAt": "2022-12-12T04:44:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOFX7TQc5IXqmF",
          "commit": {
            "abbreviatedOid": "dd38930"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-12T18:57:50Z",
          "updatedAt": "2022-12-12T18:57:50Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Thanks @martinthomson!",
              "createdAt": "2022-12-12T18:57:50Z",
              "updatedAt": "2022-12-12T18:57:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOFX7TQc5Ffagp",
      "title": "IANA considerations + changelog",
      "url": "https://github.com/quicwg/quic-v2/pull/86",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-14T21:06:52Z",
      "updatedAt": "2022-12-14T21:09:17Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "3fcd58357825eb1396f12167b2e4aeab61db3814",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "iana",
      "headRefOid": "27b6beda2b5867dbfc98a7b6b9757a8dae26d66f",
      "closedAt": "2022-12-14T21:09:17Z",
      "mergedAt": "2022-12-14T21:09:17Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "5e8eb9b2a46d4751526c1bd1279bba75d33b826e"
      },
      "comments": [],
      "reviews": []
    }
  ]
}